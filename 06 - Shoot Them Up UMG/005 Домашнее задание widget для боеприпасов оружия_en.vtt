WEBVTT
Kind: captions
Language: en

00:00:05.584 --> 00:00:10.926
Hello everyone! In this lesson, we have an independent work. It is necessary to make a widget that will

00:00:10.926 --> 00:00:16.410
display the weapon icons, the number of cartridges and clips. In the case of a rifle,

00:00:16.410 --> 00:00:21.690
when the number of cartridges is infinite, the infinity sign can be displayed. The upside-down 8 symbol is

00:00:21.690 --> 00:00:27.763
easy to Google and also the widget should be bottom-right aligned.

00:00:29.360 --> 00:00:33.857
Let's start solving our homework. We need to give access

00:00:33.857 --> 00:00:38.000
to our CurrentAmmo structure, which holds the current information about

00:00:38.000 --> 00:00:45.430
patrons and stores, so let's add a public getter called GetAmmoData.

00:00:52.530 --> 00:00:54.476
Next, in the weapon component, in the

00:00:55.170 --> 00:01:01.713
same way as we did for UIData, we create the GetWeaponAmmoData function.

00:01:03.660 --> 00:01:10.761
We replace the UI with Ammo and also the data type we have FAmmoData.

00:01:15.000 --> 00:01:17.620
And the parameter name is also AmmoData.

00:01:20.823 --> 00:01:27.327
Copy the body of the GetWeaponUIData function. Replace UI everywhere with Ammo.

00:01:33.060 --> 00:01:37.920
And the last thing left to do is in our widget to create a function

00:01:37.920 --> 00:01:43.742
that will be available in the blueprint. It will also be called GetWeaponAmmoData.

00:01:46.540 --> 00:01:48.381
Go to the .cpp file.

00:01:49.008 --> 00:01:51.614
Copy the GetWeaponUIData function.

00:01:53.460 --> 00:01:55.484
And replace the UI with Ammo.

00:02:01.050 --> 00:02:04.155
The "method selection" refactoring immediately suggests itself.

00:02:04.723 --> 00:02:10.046
Because the part of the code for obtaining the weapon component is the same in both functions.

00:02:10.046 --> 00:02:17.435
Let's create a function that returns a pointer to the weapon component. Let's call it GetWeaponComponent.

00:02:22.200 --> 00:02:29.154
Let's add it to the private section of the .h file.

00:02:33.318 --> 00:02:39.891
Copy the code for receiving the component from any function.

00:02:41.930 --> 00:02:49.606
Replace false with nullptr and just return the weapon component at the end.

00:02:52.590 --> 00:02:58.393
We replace in both functions that part of the code that was responsible for receiving the component.

00:03:14.720 --> 00:03:18.448
The last point that can be improved is to rename

00:03:18.448 --> 00:03:25.349
all functions to GetCurrentWeaponAmmoData and GetCurrentWeaponUIData.

00:03:25.931 --> 00:03:33.000
We are getting data from the current weapon, and the function name without current does not quite reflect this fact.

00:03:39.128 --> 00:03:40.178
We all start the project.

00:03:44.960 --> 00:03:52.410
Compilation error. Let's see what happened. We forgot to add the

00:03:52.410 --> 00:03:57.182
forward declaration of the weapon component class to the widget.

00:04:02.839 --> 00:04:04.157
Let's compile one more time.

00:04:05.730 --> 00:04:11.204
We have a small compilation error in the blueprint. This is because we renamed

00:04:11.204 --> 00:04:18.352
our function. Let's replace it with GetCurrentWeaponUIData.

00:04:19.560 --> 00:04:26.220
Click on split struct. Holding down Ctrl on the keyboard, we can drag all threads from one pin

00:04:26.220 --> 00:04:35.221
to another, we do the same for the return value and delete the non-existent function. Compile the widget.

00:04:36.130 --> 00:04:43.356
Also, to improve readability, we can select nodes that convert the size of the texture to the size of the image

00:04:43.971 --> 00:04:50.494
and create a macro or function based on them. Let's create a macro, right click, collapse to macro.

00:04:52.444 --> 00:04:58.890
Let's call the macro ImageSizeFromTexture. In fact, a macro is a cosmetic thing that simply

00:04:58.890 --> 00:05:04.738
collapses the nodes on the graph. We click twice, we will fall inside. We have created two input pins.

00:05:04.738 --> 00:05:08.285
It is enough for us to have one, so the second can be deleted,

00:05:08.285 --> 00:05:16.677
because it is the same texture. Change the name in inputs to texture and the name of outputs to size.

00:05:19.309 --> 00:05:23.413
And remove the invalid pin by holding alt and clicking on it.

00:05:28.460 --> 00:05:35.802
Moving on to creating the weapon UI elements. To do this, on the left in the search, beat the horizontal box.

00:05:36.296 --> 00:05:41.611
Let's place the picture and text in this container. In the search, enter the text.

00:05:42.774 --> 00:05:48.510
Let's transfer it to the component tree. The next element we need is a spacer.

00:05:49.203 --> 00:05:54.448
We also add it to the horizontal box. It serves to discharge other elements.

00:05:54.448 --> 00:06:03.785
It doesn't have many properties. We need size and you can put 30 at X - this is the number of units between the

00:06:04.485 --> 00:06:12.557
text block and the picture. Let's find the image and add the spacer to the horizontal box as well.

00:06:13.520 --> 00:06:19.455
Select the horizontal box in the object tree and set its property SizeToContent to true.

00:06:19.455 --> 00:06:28.388
Its size will adjust to the size of the internal elements. Let's adjust the alignment. Select property Anchor

00:06:28.388 --> 00:06:34.729
and align to the bottom right corner. Set the x and y positions to 0.

00:06:34.729 --> 00:06:42.102
Next, you need to change the alignment, as we did with the crosshair. Only here we need to put units and then the

00:06:42.102 --> 00:06:49.005
block will be aligned on the lower right edge. Set PositionX = - 50, PositionY = - 50.

00:06:49.005 --> 00:06:56.454
Make indents. And for the image, set the preview image. Selecting RifleMainIcon.

00:06:58.075 --> 00:07:02.939
Align the text box to the center.

00:07:03.679 --> 00:07:09.547
Find property vertical alignment and click the center alignment button.

00:07:10.855 --> 00:07:17.233
Let's start with a picture bind. We have already done this. Select image and press create bind.

00:07:19.177 --> 00:07:22.945
Let's call the function GetWeaponIcon.

00:07:26.410 --> 00:07:29.845
Copy the blueprints from the crosshair function.

00:07:33.510 --> 00:07:40.378
We insert into our new function. Add a conditional operator.

00:07:41.785 --> 00:07:45.205
We connect all the strings.

00:07:46.443 --> 00:07:51.158
Copy the exit node. If false, then the default texture will rotate,

00:07:51.158 --> 00:07:58.239
if not, then connect the SlateBrush. And with Ctrl held down, drag the

00:07:58.239 --> 00:08:04.802
strings from the crosshair icon to the main icon. Compile. Let's get a look.

00:08:06.000 --> 00:08:09.985
We switch weapons, and the pictures switch.

00:08:11.130 --> 00:08:12.499
Moving on.

00:08:13.545 --> 00:08:21.065
We need to display information on the ammunition of the current weapon. We select our text and we will do it in the format:

00:08:21.410 --> 00:08:29.549
number of cartridges / number of clips. Click on bind opposite property Text.

00:08:31.981 --> 00:08:37.296
Rename the function to GetAmmoText.

00:08:38.472 --> 00:08:40.930
Let's program the output of the text.

00:08:41.852 --> 00:08:52.396
The first thing to do is call the GetCurrentAmmoWeaponData function. We split our structure.

00:08:54.124 --> 00:09:02.521
Add a branch node. If the return value is true, then we will print information.

00:09:02.521 --> 00:09:08.628
And if false, then we can copy the return node and display empty text.

00:09:11.810 --> 00:09:21.241
Convert the number of bullets to string. To do this, in the search, we drive in ToString. Next, we need an

00:09:21.241 --> 00:09:31.060
append node , which concatenates the lines. First we have bullets, then a space, slash, space and you can

00:09:31.060 --> 00:09:36.771
press add pin. An additional pin will be added. This is where we need to display the number of stores.

00:09:36.771 --> 00:09:43.582
We also have a boolean variable, infinite ammo or not. Let's handle this case as well.

00:09:43.582 --> 00:09:52.208
Select the select node. This is a template node, which, depending on the value of the variable, allows you to actually make a switch.

00:09:52.208 --> 00:10:00.000
That is, if we have the value infinite == false, that is, the number of clips is finite, then in this situation

00:10:00.000 --> 00:10:07.861
we simply display them. I saved a comment with an infinity symbol in the event graph before starting the lesson.

00:10:07.861 --> 00:10:15.490
Comments are added to the blueprint by pressing the C key. Insert the infinity symbol

00:10:15.490 --> 00:10:23.870
if we have infinite weapons. We connect the output of the append node to the return value. An additional

00:10:23.870 --> 00:10:30.813
node for converting FString to FText has been added. In general, we could make a special function in our C ++ widget

00:10:30.813 --> 00:10:35.850
that just outputs text. But again, this is more related to design,

00:10:35.850 --> 00:10:42.090
how we want to display information about the weapon. Therefore, it is better to simply provide all the data

00:10:42.090 --> 00:10:49.899
that we have in blueprints . So, let's check. If you are holding a rifle, then cartridges and the symbol of infinity are printed.

00:10:50.480 --> 00:10:58.125
If the launcher, then the number of cartridges and the number of clips. Also, if you and I die,

00:10:58.125 --> 00:11:03.789
then our images turn into white pictures. We will correct this in the next lesson.

