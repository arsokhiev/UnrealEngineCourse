WEBVTT
Kind: captions
Language: en

00:00:05.906 --> 00:00:12.823
In this tutorial, we will fix a small bug. Set in GameData two players and the number of seconds of the round is 120.

00:00:12.823 --> 00:00:19.614
Start the game. When damage is done, our widget flashes red. We were killed.

00:00:20.670 --> 00:00:25.455
We do a respawn. We will catch up with the enemy character so that he finds us.

00:00:27.750 --> 00:00:34.319
Damage is done, but after respawning, the red widget does not flash. Let's see why this is happening.

00:00:34.319 --> 00:00:40.409
In the Initialize function, the PlayerHUD of the widget is called only once at the start of the game.

00:00:40.409 --> 00:00:46.484
In it, we subscribe to the OnHealthChanged delegate of the health component of the current pawn.

00:00:46.484 --> 00:00:52.141
After the respawn, we change the character object and we need to re-do the bind of the

00:00:52.141 --> 00:00:59.090
OnHealthChanged function to the delegate of the new character object.It would be perfectly fine if

00:00:59.090 --> 00:01:06.336
there was a delegate in the controller class that is called every time the controller's pawn changes.

00:01:06.336 --> 00:01:12.650
In the Initialize function of the widget, we would subscribe to this delegate and each time it is called, we would bind

00:01:12.650 --> 00:01:19.490
to the OnHealthChanged delegate of the new pawn. Such a delegate exists, if we go to the OnPossess

00:01:19.490 --> 00:01:25.590
function of the base controller class, we will see that at the beginning a local variable is created,

00:01:25.590 --> 00:01:31.560
which is called bNewPawn. It is set to true if the Pawn has changed and a

00:01:31.560 --> 00:01:37.934
delegate called OnNewPawn is called at the very end. If you go to the controller header file,

00:01:37.934 --> 00:01:43.860
you can find a function called GetOnNewPawnNotifier - this function returns a reference

00:01:43.860 --> 00:01:51.179
to the OnNewPawn delegate, the delegate has one parameter: a pointer to the new pawn, so in the PlayerHUD widget

00:01:51.179 --> 00:01:56.160
we can subscribe to this OnNewPawn delegate and every time it is called,

00:01:56.160 --> 00:02:02.580
we will subscribe to change the health of the new pawn. Let's implement this logic.

00:02:04.776 --> 00:02:07.790
We check if the pointer to the controller is not null.

00:02:10.140 --> 00:02:11.879
if not zero,

00:02:13.971 --> 00:02:19.039
then we get a reference to the OnNewPawn delegate using the getter function

00:02:20.666 --> 00:02:24.369
And add bind for the OnNewPawn function, which we will create now.

00:02:27.810 --> 00:02:29.794
Let's go to the header file.

00:02:32.490 --> 00:02:36.144
Into the private category, declare the OnNewPawn function.

00:02:37.285 --> 00:02:41.305
According to the signature, it must have one parameter - a pointer to pawn.

00:02:43.655 --> 00:02:45.835
We create the body of the function.

00:02:47.245 --> 00:02:51.699
We transfer the code in which we subscribe to health changes to this function.

00:02:52.970 --> 00:02:57.455
We need to get a pointer to the health component from the pawn, which comes in a parameter.

00:02:58.300 --> 00:03:02.800
One more point: the OnInitialize function will be called after the OnPossess function,

00:03:02.800 --> 00:03:08.710
so the very first time we will not receive a notification. Let's call the OnNewPawn function explicitly.

00:03:08.710 --> 00:03:14.770
You can check the order of the call using breakpoints, or you can use the logs in the Initialize function and in

00:03:14.770 --> 00:03:20.724
the OnPossess function, only for logs, the OnPossess function will have to be overridden in the PlayerController class.

00:03:21.440 --> 00:03:30.175
We compile the project. We check the work of our code. The red widget is flashing. Then there is a respawn.

00:03:32.571 --> 00:03:38.931
We will reach the enemy and the widget still does not blink after respawning. Let's figure out what's the matter.

00:03:38.931 --> 00:03:45.485
The fact is that there is a bug in game mode, meaning it is obvious that this delegate should be called

00:03:45.485 --> 00:03:52.443
when our pawn changes. Let's see what is the sequence of calling functions when character spawns.

00:03:52.443 --> 00:03:59.178
To respawn, we call the RestartPlayer function. Next, we get into the RestartPlayerAtPlayerStart function

00:04:00.092 --> 00:04:05.270
and directly in this game mode function explicitly calls the controller function, which

00:04:05.270 --> 00:04:11.000
is called SetPawn and passes in it a pointer to the pawn that was just created.

00:04:11.000 --> 00:04:17.089
The SetPawn function sets the internal pawn pointer to a pointer that we pass to this function.

00:04:17.089 --> 00:04:22.250
In the header file, above the function declaration, you can read a comment that says

00:04:22.250 --> 00:04:28.754
that it is better not to call this function from it. So game mode called this function,

00:04:28.754 --> 00:04:35.069
set the internal pawn value of the controller. Next, the FinishRestartPlayer function is called.

00:04:35.069 --> 00:04:40.515
Here the Possess function is called, into which the pawn already set to the controller is passed.

00:04:41.615 --> 00:04:46.175
In the controller's Possess function itself, the OnPossess function is called

00:04:46.910 --> 00:04:53.420
and the bNewPawn variable will never be true because game mode called the SetPawn function.

00:04:53.420 --> 00:05:00.649
that is, the pointer that GetPawn returns is always equal to the InPawn pointer, so the

00:05:00.649 --> 00:05:06.755
variable is false and the OnNewPawn delegate is never called with the given game mode logic.

00:05:07.370 --> 00:05:12.980
Moreover, if we ourselves call the OnPossess function, since we did this with you in the very first section,

00:05:12.980 --> 00:05:18.590
then there will be no problems with this, since we did not call the SetPawn function from outside. The base game mode class

00:05:18.590 --> 00:05:24.650
needs to be fixed. Add fix so that the SetPawn function is not called in it. We do not work

00:05:24.650 --> 00:05:31.160
with the sources, so we will not modify the game mode, but we will add our own fix. Let's override

00:05:31.160 --> 00:05:37.830
the OnPossess function in the playercontroller class and explicitly call the OnNewPawn delegate in it.

00:05:37.830 --> 00:05:43.200
There will be no problems in our code in this regard, but it must be remembered that if we call

00:05:43.200 --> 00:05:50.865
the OnPossess function explicitly in our playercontroller, then the OnNewPawn delegate will do Broadcast twice.

00:05:53.701 --> 00:05:58.981
It is also possible that in one of the next versions of the UE this bug will be fixed

00:05:58.981 --> 00:06:03.960
and the OnNewPawn delegate will be called correctly, then in our code the OnNewPawn function

00:06:03.960 --> 00:06:09.494
will be called twice. Let's simulate this situation, add a few additional

00:06:09.494 --> 00:06:16.415
calls to the OnNewPawn function and see what happens in this case. We compile the project.

00:06:18.445 --> 00:06:24.120
For a clean one, we need to leave one player on the stage, that is, our player.

00:06:25.505 --> 00:06:30.604
And let's add temporary code for the test to the PlayerController blueprint.

00:06:32.280 --> 00:06:33.405
We open the graph.

00:06:35.392 --> 00:06:43.276
We will inflict damage on our character by pressing any key, for example "1". We call the ApplyDamage node.

00:06:45.000 --> 00:06:52.879
We get the pawn using the GetPlayerPawn function, connect it to DamageActor and pass some Damage value.

00:06:53.617 --> 00:07:01.335
Let's also open the PlayerHUD widget, go to the graph.

00:07:03.025 --> 00:07:10.540
And when the OnTakeDamage function is called, we will display any message, for example, damage.

00:07:15.700 --> 00:07:25.718
We start the game. Press "1". The message was printed three times, that is, we bind the OnHealthChanged function three times.

00:07:25.718 --> 00:07:27.524
This is naturally wrong.

00:07:27.928 --> 00:07:33.988
Although specifically in our case, nothing will break. Correcting this situation is quite simple.

00:07:33.988 --> 00:07:44.005
Delegates have a special function that checks if bind exists for a specific object. The function is called IsBoundToObject.

00:07:46.201 --> 00:07:52.934
As a parameter, we pass a pointer to the current object - this. The function returns true if bind exists

00:07:52.934 --> 00:07:58.575
for the given object , so we added it under the if and also needs to take the negation.

00:07:58.575 --> 00:08:03.660
That is, we only bind OnHealthChanged if it doesn't already exist.

00:08:05.340 --> 00:08:12.440
We start the game. Press "1". The damage message was displayed once. Everything works.

00:08:13.690 --> 00:08:18.684
Let's now check it out completely all together. Installing two players.

00:08:20.801 --> 00:08:23.365
Damage is applied, the widget flashes.

00:08:24.761 --> 00:08:25.980
We are being killed.

00:08:29.050 --> 00:08:30.309
Respawn.

00:08:31.835 --> 00:08:37.728
The widget flashes again. That's all in this lesson. I will not save all the test code.

