WEBVTT
Kind: captions
Language: en

00:00:06.062 --> 00:00:10.472
In this tutorial, we will add a special effect for the camera called camera shake.

00:00:11.036 --> 00:00:17.304
We will have the camera shake whenever we receive any damage. Go to the vfx daddy.

00:00:18.502 --> 00:00:23.622
Create a new blueprint class. In the search, enter camera shake.

00:00:25.749 --> 00:00:31.728
We inherit from the MatineeCameraShake class. This out-of-the-box solution will allow us to tweak

00:00:31.728 --> 00:00:38.509
this effect fairly quickly. Name the new asset BP_DamageCameraShake and open it.

00:00:39.920 --> 00:00:45.942
We are interested in the settings that are in the details panel. The category is called oscillation.

00:00:45.942 --> 00:00:52.040
Translated as vibration, or vibration. The first property that we will be interested in is called duration,

00:00:52.040 --> 00:00:57.440
that is, the time of camera oscillation, and then we will be interested in the property of the camera oscillation settings

00:00:57.440 --> 00:01:06.091
along its various axes. For a test, let's play this effect through a blueprint. Go to the player folder.

00:01:06.091 --> 00:01:12.585
We open the controller. We will call this effect on Tick. The function that plays

00:01:12.585 --> 00:01:18.773
Camera Shake is located in the camera manager. We get this object using a special getter.

00:01:22.071 --> 00:01:30.480
We call the StartCameraShake function. We connect Tick to this node and in the ShakeClass settings specify the

00:01:30.480 --> 00:01:35.490
asset that we just created. Click play. Nothing happens.

00:01:35.490 --> 00:01:43.986
This is because we have all the settings at zero. Specify Duration 0.2 seconds, specify an amplitude of 10 for pitch.

00:01:44.596 --> 00:01:52.407
Run it. The pitch of the camera starts to vibrate with an amplitude of 10 units. Let's check another parameter.

00:01:52.407 --> 00:01:57.350
Frequency. Let's set the amplitude to 1. and set the frequency to, for example, 20.

00:01:58.732 --> 00:02:05.370
That is, it changes the vibration frequency. Twenty is not very noticeable. Let's set some more extreme

00:02:05.370 --> 00:02:11.830
value - 100. The camera is shaking more intensely now. Thus, playing with these

00:02:11.830 --> 00:02:17.498
parameters, you can get a good effect. Let's set more sane values.

00:02:17.498 --> 00:02:25.661
Let the amplitude be one. We replace the frequency with 10 and set the same values ​​for yaw.

00:02:28.171 --> 00:02:34.591
We launch. Shake camera now looks more accurate. You can slightly increase the

00:02:34.591 --> 00:02:41.237
frequency - set the frequency to 20. In general, the setting of these parameters can be provided to the designer.

00:02:42.097 --> 00:02:46.520
We will not touch Roll, because it looks more aggressive, for example, if we set the

00:02:46.520 --> 00:02:51.442
amplitude to 10 and some frequency. That looks a little strange in our situation.

00:02:51.442 --> 00:02:57.450
Although for some mechanic, when the floor starts to shake, perhaps this is a good solution.

00:02:57.450 --> 00:03:04.684
We will leave these parameters at zero. Create a new property in the health component class.

00:03:07.232 --> 00:03:13.415
Change the category to vfx, use the TSubclassOf template.

00:03:14.640 --> 00:03:20.200
The class that corresponds to camera shake in C ++ is called UCameraShakeBase.

00:03:24.559 --> 00:03:26.610
Let's call the property CameraShake.

00:03:30.158 --> 00:03:32.216
Let's add a forward declaration of the class.

00:03:37.155 --> 00:03:40.919
For convenience, let's add a new function to the private section,

00:03:40.919 --> 00:03:45.423
which will be responsible for playing the effect. Let's call it PlayCameraShake.

00:03:51.417 --> 00:03:58.476
Go to the .cpp file. Let's add the header files that we need: pawn, controller

00:04:02.025 --> 00:04:04.238
and also camera shake.

00:04:06.896 --> 00:04:09.200
Let's create the body of the PlayCameraShake function.

00:04:12.562 --> 00:04:18.187
We will call it in the OnTakeAnyDamage function when we receive any damage.

00:04:20.516 --> 00:04:27.644
First, let's check if our character is alive or not. If it is dead, then we exit this function. Next, we get

00:04:29.254 --> 00:04:36.324
Next, we get a pointer to pawn. Immediately we cast the pointer, which returns GetOwner to the APawn class.

00:04:36.788 --> 00:04:43.361
The pointer to the controller is in the pawn, so there is no point in casting to the ACharacter class.

00:04:44.380 --> 00:04:52.925
If the pointer is nullptr, then we also exit the function. If not, then we get a pointer to the controller.

00:04:54.572 --> 00:05:02.807
To do this, we call the GetController template function. We pass APlayerController as the template argument.

00:05:04.220 --> 00:05:08.868
If the given pointer is null, then we exit the function.

00:05:08.868 --> 00:05:15.502
The second condition by which we exit the function: a pointer to PlayerCameraManager = nulltpr.

00:05:17.471 --> 00:05:24.413
If everything is in order, then we call the StartCameraShake function, which is located

00:05:25.004 --> 00:05:29.756
in the PlayerCameraManager. We just called this function with you in the blueprint.

00:05:30.938 --> 00:05:36.502
We pass CameraShake as an argument, all other parameters can be left by default.

00:05:38.486 --> 00:05:47.865
Launch the editor. Open the character class and install the CameraShake asset in the health component.

00:05:47.865 --> 00:05:54.467
I did not save the nodes in the controller with the effect playing on Tick. Click play. We run into the sphere.

00:05:55.570 --> 00:05:59.950
The camera starts shaking and we quickly died. Let's change the amount of damage the

00:05:59.950 --> 00:06:05.677
red sphere deals. Set a small value: 0.5

00:06:06.460 --> 00:06:13.692
Run in again, exit, run in, exit. The camera only shakes when we receive damage.

00:06:14.183 --> 00:06:19.052
It will look more natural when we take point damage from other players.

