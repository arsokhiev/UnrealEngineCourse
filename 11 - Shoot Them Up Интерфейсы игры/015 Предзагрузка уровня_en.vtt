WEBVTT
Kind: captions
Language: en

00:00:05.684 --> 00:00:10.710
In this tutorial we will make a static preloader. You've probably already noticed that when we

00:00:10.710 --> 00:00:17.092
load our level, the whole interface freezes, because the level is loaded synchronously.

00:00:17.092 --> 00:00:24.295
In unreal, this problem can be solved in several ways: you can do asynchronous loading, you can do level streaming.

00:00:24.295 --> 00:00:28.897
We will solve this problem with the help of animation. Change the screen to black

00:00:28.897 --> 00:00:36.053
and load the level after the animation is complete. This will solve our problem of the interface freezing when opening a level.

00:00:37.391 --> 00:00:43.012
When we click on the button to start the game, the OnStartGame function is called, it opens the

00:00:43.012 --> 00:00:48.540
level that we have selected. Let's change the logic as follows: in the OnStartGame function, we will

00:00:48.540 --> 00:00:55.260
start the animation of the transition to a black screen, and when the animation ends, we will call the code that is

00:00:55.260 --> 00:01:01.080
now in the OnStartGame function. Let's figure out how to understand that the animation is over.

00:01:01.880 --> 00:01:08.060
Go to the header file UserWidget. There are two native events in the base class:

00:01:08.060 --> 00:01:14.804
OnAnimationStarted and OnAnimationFinished. They are called when the animation has started, or when the animation has ended.

00:01:15.267 --> 00:01:22.136
We have already covered the Native event in GameMode. Let's override the OnAnimationFinished_Implementation function

00:01:22.717 --> 00:01:26.364
in our menu widget. This function will be called every time

00:01:26.364 --> 00:01:31.720
any animation has finished. Which animation has ended, we can understand

00:01:31.720 --> 00:01:36.952
thanks to the parameter that this function has. We create the body of the function in a .cpp file.

00:01:39.205 --> 00:01:43.196
Let's add a new property with animation to the header file of the widget menu.

00:01:47.459 --> 00:01:49.328
Let's call it HideAnimation.

00:01:50.940 --> 00:01:57.644
And in the StartGame function we will start this animation. We call the PlayAnimation function.

00:02:00.421 --> 00:02:02.861
We pass HideAnimation to it.

00:02:04.648 --> 00:02:11.804
And we will mix the level loading code into the OnAnimationFinished function. This function will be called every time,

00:02:11.804 --> 00:02:17.760
no matter which animation ends. We also have a start animation - ShowAnimation.

00:02:17.760 --> 00:02:23.220
Therefore, this function will be called in this case as well. To load the level only

00:02:23.220 --> 00:02:27.177
after the completion of HideAnimation, we need to add a check.

00:02:27.177 --> 00:02:33.381
If the Animation parameter is not equal to HideAnimation, then we simply exit the function.

00:02:34.913 --> 00:02:36.456
Everything can be compiled.

00:02:37.559 --> 00:02:39.643
Add HideAnimation to the menu.

00:02:42.622 --> 00:02:47.950
We can reuse the image we are using to animate the appearance.

00:02:48.365 --> 00:02:51.275
Let's add it to the HideAnimation track.

00:02:52.764 --> 00:02:56.000
We also animate the property color and opacity.

00:02:57.840 --> 00:03:05.129
At the beginning we will have an alpha - zero, and at the end we will set the alpha value equal to one.

00:03:06.560 --> 00:03:13.940
Additionally, we can add property visibility and set it visible, thanks to this, after the

00:03:13.940 --> 00:03:18.530
start of the animation, all our buttons will be inaccessible and the user, for example, will not be able to

00:03:18.530 --> 00:03:25.667
switch the level while this animation is playing. Additionally, let's add a text element.

00:03:29.149 --> 00:03:30.889
Let's place it in the center.

00:03:33.378 --> 00:03:36.659
Set Size to content to true. Change the text to Loading.

00:03:39.686 --> 00:03:42.166
We can copy the color for the text from the title.

00:03:50.065 --> 00:03:50.756
We insert.

00:03:53.110 --> 00:03:54.388
We will also change the font.

00:03:55.719 --> 00:04:04.000
Let's increase the size. Let it be 200. Also set the alignment (0.5, 0.5) - so that the text is centered.

00:04:06.709 --> 00:04:11.330
To prevent the text from overlapping our buttons (since it will always be in the viewport), set

00:04:11.330 --> 00:04:18.104
its Visibility to Non-HitTestable. Also, by default, let's make the transparency equal to 0.

00:04:19.398 --> 00:04:22.000
Add text to the HideAnimation track.

00:04:24.154 --> 00:04:29.645
Add animation for property color in opacity. At the initial moment of time, the transparency is equal to 0,

00:04:31.000 --> 00:04:33.726
and at the final moment, the transparency is equal to one.

00:04:35.392 --> 00:04:43.021
Thus, the screen darkens and the Loading inscription appears. Let's check. We launch.

00:04:46.481 --> 00:04:54.269
Click start game. The animation starts, and upon completion, the level opens. The screen with the preloader is working.

00:04:55.558 --> 00:04:59.637
Let's look at the moment at the very end of the section, which I did not focus on.

00:04:59.637 --> 00:05:08.197
How to find out which C ++ class corresponds to a UI element. To do this, drag out an arbitrary element to our layout.

00:05:08.197 --> 00:05:13.866
Let it be GridPanel. In the details panel, at the top right, there is an Open GridPanel hyperlink.

00:05:13.866 --> 00:05:17.603
We click on it. This class was highlighted in visual studio.

00:05:18.168 --> 00:05:24.947
On hover, we can see where the header file is located, and also see what the class is called in C ++

