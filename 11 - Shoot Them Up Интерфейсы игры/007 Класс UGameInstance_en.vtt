WEBVTT
Kind: captions
Language: en

00:00:05.970 --> 00:00:09.756
In this lesson, let's look at a new class. It's called GameInstance.

00:00:09.756 --> 00:00:14.674
An object of this class is created during the start of the game and is available for the entire time

00:00:14.674 --> 00:00:19.267
while our game is running. In this class, it is convenient to store settings,

00:00:19.267 --> 00:00:26.532
various information that does not depend on a specific level and we can read or write it at any time.

00:00:26.532 --> 00:00:31.576
We inherit from this class. In the search, enter game instance.

00:00:33.325 --> 00:00:40.589
We select this class, let's name it STUGameInstance. Click the create class button.

00:00:42.040 --> 00:00:47.680
Let's write some rudimentary code to check that the given class is indeed accessible from anywhere

00:00:47.680 --> 00:00:55.379
in our program. To do this, let's create a test variable of the FString type in the game instance class.

00:00:56.300 --> 00:01:02.800
Let's assign it some value - Hello Game. Let's change the value of this variable

00:01:02.800 --> 00:01:09.350
when loading the menu level. You can do this in any class, for example, in the controller class

00:01:09.350 --> 00:01:15.466
, we already have the BeginPlay function. Let's include the header file STUGameInstance.

00:01:17.918 --> 00:01:27.367
A pointer to the current game instance can be obtained using the UWorld object. The function is called GetGameInstance.

00:01:28.245 --> 00:01:33.880
Functions are overloaded. One of them returns a pointer to the base class game instance,

00:01:33.880 --> 00:01:38.270
so we can make a cast, and the second function is templated, so

00:01:38.270 --> 00:01:43.790
we can specify our STUGameInstance class as a template parameter.

00:01:45.791 --> 00:01:54.116
Change the value of the TestString variable. Let's write some value, for example, Menu level says helloo.

00:01:55.020 --> 00:01:59.340
We are not doing any checks for a null pointer here, because

00:01:59.340 --> 00:02:06.952
I will not save this code. We do it purely for the test. So, we have written a new value to TestString

00:02:07.793 --> 00:02:13.575
and when TestLevel is started in GameModeBase, we will read the value of this variable,

00:02:13.575 --> 00:02:19.740
for example, in the StartPlay function. Thus, we will check that the object of this class has not been recreated.

00:02:19.740 --> 00:02:24.437
In the console, we should see the value that we wrote to the MenuPlayerController.

00:02:29.130 --> 00:02:33.551
Don't forget about the asterisk operator. You can run editor.

00:02:35.074 --> 00:02:45.476
Let's create a blueprint class that inherits from STUGameInstance. Put it in the content root directory. The asset has been created.

00:02:47.380 --> 00:02:50.675
Now we need to override the base game instance class.

00:02:50.675 --> 00:02:54.976
This is done in project settings. You can search for a game instance

00:02:56.000 --> 00:03:01.300
and there will be a property game instance class. We specify BP_STUGameInstance here.

00:03:02.739 --> 00:03:13.729
We open the console, clear the log, run it. Press start game and let's enter the word "says" in the search log.

00:03:15.694 --> 00:03:22.833
And indeed the message was printed, that is, the object of the game instance class is the same for all our levels.

