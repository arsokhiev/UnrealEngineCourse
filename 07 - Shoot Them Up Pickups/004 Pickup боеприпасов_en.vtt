WEBVTT
Kind: captions
Language: en

00:00:06.580 --> 00:00:13.840
So, let's start developing an ammo pickup truck. Let's start with adding the necessary properties, parameters

00:00:13.840 --> 00:00:21.300
that the pickup weapon will have. I copied the macro in advance so as not to retype it. The first property will be

00:00:21.300 --> 00:00:27.148
responsible for the number of shops that the character can take. Its access specifier is EditAnywhere,

00:00:27.148 --> 00:00:32.520
that is, we can change the value of any pickup on the scene and also added Clamp restrictions

00:00:32.520 --> 00:00:40.192
to the meta information. The value will be from 1 to 10. The variable is of type int32. Let's call it ClipsAmount.

00:00:41.170 --> 00:00:46.897
And by default, we will set it to 10. The second property that we need will be

00:00:46.897 --> 00:00:50.800
responsible for the type of weapon, that is, we will use this variable to determine which weapon

00:00:50.800 --> 00:01:02.169
needs to add these ClipsAmount magazines. The variable will be of type TSubclassOf &lt;ASTUBaseWeapon&gt; Let's

00:01:02.927 --> 00:01:04.843
call it WeaponType.

00:01:06.663 --> 00:01:09.681
Add a forward declaration for the weapon class.

00:01:11.106 --> 00:01:19.365
Move to the .cpp file. Let's add the header files that we need and we need: STUHealthComponent,

00:01:19.365 --> 00:01:27.327
STUWeaponComponent and our STUUtils utility. So, in the GivePickupTo function,

00:01:27.327 --> 00:01:32.183
we will need to add the number of magazines to the corresponding weapon type.

00:01:32.183 --> 00:01:38.400
First, let's check if our character is alive or not. To do this, we get the health component

00:01:38.400 --> 00:01:42.852
using our function, which we created in the previous section when we made widgets

00:01:42.852 --> 00:01:49.163
and pass the PlayerPawn pointer to the function. Next, we need to check. If this component

00:01:49.163 --> 00:01:55.230
does not exist or the IsDead function of the health component returns true, then we exit the function

00:01:55.230 --> 00:02:00.540
with the value false, because our character is definitely dead and, for example, he could simply

00:02:00.540 --> 00:02:07.774
fall on this pickup truck dead. If the character crossed the collision alive, then we get a pointer

00:02:07.774 --> 00:02:13.318
to the WeaponComponent. If this component does not exist, then we also exit the function.

00:02:18.486 --> 00:02:24.671
And if it exists, then we call the function that we need to create. Let's call it TryToAddAmmo.

00:02:25.470 --> 00:02:33.473
And we pass the parameters to this function: the number of stores and WeaponType. This completes the writing of the code

00:02:33.473 --> 00:02:39.480
in this function. That is, we have fully implemented the pickup class. First, move

00:02:39.480 --> 00:02:46.600
to the WeaponComponent. We declare a function in the header file with the signature we need: the type of weapon

00:02:46.600 --> 00:02:51.330
and the number of cartridges. The function will also return a boolean value, that is, under

00:02:51.330 --> 00:02:57.893
some conditions, even with a live character, we will not be able to add an arsenal to a certain weapon.

00:02:57.893 --> 00:03:03.254
So the pickup has called the TryToAddAmmo function.

00:03:03.254 --> 00:03:09.750
We need to go through the entire array of our weapons and determine if there is a type of weapon in our

00:03:09.750 --> 00:03:16.439
arsenal to which we want to add magazines or not. To do this, we check the Weapon pointer to nullptr

00:03:17.210 --> 00:03:23.344
and check if the weapon is of a certain type. This can be done using the IsA function.

00:03:23.344 --> 00:03:29.480
This function of the UObject class takes a type as a parameter and returns true if the current object

00:03:29.480 --> 00:03:37.335
is of this type. Thus, if these two conditions are met, then we have found the type of weapon we are interested in.

00:03:37.335 --> 00:03:43.414
And we will call one more additional function, which will be located directly in the base weapon class.

00:03:43.414 --> 00:03:49.147
Let's also call it TryToAddAmmo. Only the type of weapon we now do not need to transfer,

00:03:49.147 --> 00:03:53.800
Enough number of magazines. if after checking all the elements of the array of

00:03:53.800 --> 00:03:59.457
our weapons we did not find the type of weapon we are interested in, then we simply return false.

00:04:02.292 --> 00:04:09.990
Moving on, go to the BaseWeapon header file. We declare the TryToAddAmmo function. It will also return a

00:04:09.990 --> 00:04:14.707
boolean value and add an additional function, for example, to the protected section.

00:04:14.707 --> 00:04:22.231
Let's call it IsAmmoFull. This is a helper function. We create it to improve the readability of our code.

00:04:22.960 --> 00:04:28.366
Let's start with her. This function is completely simple. It will return true

00:04:28.366 --> 00:04:33.905
when the current number of cartridges and magazines matches the default values.

00:04:43.100 --> 00:04:46.255
We create a body for the TryToAddAmmo function.

00:04:47.157 --> 00:04:53.892
This is the most important function in this tutorial. It will contain the main logic for adding magazines and cartridges.

00:04:55.317 --> 00:05:02.225
We'll start with the conditions under which we cannot add a pickup. The first condition: the type of weapon we have is Infinite.

00:05:02.225 --> 00:05:07.640
In general, it is possible to implement that we only add cartridges in this situation, but we will not do this.

00:05:07.640 --> 00:05:13.250
We also exit the function, we have a full ammunition load, that is, we simply have nothing to

00:05:13.250 --> 00:05:19.250
add to this ammunition, since the function is public, it can be called from any client

00:05:19.250 --> 00:05:25.130
that uses this BaseWeapon class, and not just from our pickup. Therefore, let's add a check

00:05:25.130 --> 00:05:32.637
that the number of stores must be greater than 0, under these conditions we will not take the pickup and return false.

00:05:33.149 --> 00:05:38.334
Next, we have several cases, which depend on how we will add stores.

00:05:39.070 --> 00:05:45.144
The first case: when IsAmmoEmpty returns true, that is, the number of magazines and cartridges is zero.

00:05:45.588 --> 00:05:51.951
In this case, we completely fill the ammunition stores. The number that came to the function can be greater than the

00:05:51.951 --> 00:05:57.463
default Clips value. By this number (DefaultAmmo.Clips), we determine the maximum possible number of

00:05:57.463 --> 00:06:04.570
magazines in this weapon, so we need to limit the ClipsAmount value added to CurrentAmmo.Clips to the DefaultAmmo.Clips

00:06:04.570 --> 00:06:11.301
value, for this we use the FMath :: Clamp function It is

00:06:11.301 --> 00:06:19.257
not necessary to add CurrentAmmo.Clips to the first argument because this value is zero.

00:06:19.257 --> 00:06:28.388
The second argument is the lower limit of the Clamp, and the third is the upper one. We also add 1 to DefaultAmmo.Clips,

00:06:28.388 --> 00:06:34.840
because after that we immediately call our reload delegate and it turns out that if we have a

00:06:34.840 --> 00:06:44.472
default value of clips equal to 5, and in the pickup there were, for example, 10 clip values, then we make CurrentAmmo.Clips

00:06:44.472 --> 00:06:49.977
equal 6, we reload and one clip goes directly to the weapon.

00:06:49.977 --> 00:06:58.026
Thus, the ammunition will be completely filled. In the following condition, the current number of clips is less than the maximum value.

00:06:58.026 --> 00:07:04.247
We will write this condition a little later. It is the most difficult and third condition.

00:07:04.247 --> 00:07:10.980
We fall to this point in the code if the current number of clips is equal to the default number of clips, but at the same time we

00:07:10.980 --> 00:07:17.620
know that our arsenal is not full. This means that the number of cartridges we have is less than the maximum,

00:07:18.020 --> 00:07:24.308
then we actually use the entire pickup to fill the current clip, which is in our weapon.

00:07:24.308 --> 00:07:29.680
We pass to the second branch. Here we also have several options.

00:07:30.760 --> 00:07:35.885
We need to check if we can use the ClipsAmount value to replenish both the

00:07:35.885 --> 00:07:41.790
magazines in the ammunition and the current magazine, that is, in fact, fill the number of cartridges

00:07:41.790 --> 00:07:47.798
to the maximum. For this purpose, we will create an additional local variable.

00:07:50.361 --> 00:07:57.680
Let's call it NextClipsAmount and write in a variable the sum of the current value of

00:07:57.680 --> 00:08:02.019
stores and the number of stores that were passed to our function.

00:08:05.416 --> 00:08:11.478
Next, we check: if the value of the difference between the maximum value of stores

00:08:11.478 --> 00:08:17.720
and this variable NextClipsAmount is greater than or equal to 0, then this means

00:08:17.720 --> 00:08:23.330
that we can assign this value to the variable to the current value of stores, that is, the number of

00:08:23.330 --> 00:08:27.920
stores we have will not exceed the maximum and plus in this case we will not be left with

00:08:27.920 --> 00:08:33.375
an additional store in order to replenish the clip directly into the weapon.

00:08:35.918 --> 00:08:40.400
If the difference between these two variables is less than zero, then we have at

00:08:40.400 --> 00:08:45.590
least one additional clip, with which we can also replenish the current

00:08:45.590 --> 00:08:52.762
magazine in the weapon. That is, in fact, our ammunition is fully replenished: both Clips and Bullets.

00:08:59.070 --> 00:09:04.183
Let's add logs to all of our branches for testing to see how it works.

00:09:05.736 --> 00:09:10.709
If we are in the first branch of our if statement, let's write "Ammo was empty".

00:09:13.120 --> 00:09:18.692
If we managed to add only stores, then write "Clips were added".

00:09:20.739 --> 00:09:26.780
If we have completely memorized the ammunition, then we will write "Ammo is full now".

00:09:28.245 --> 00:09:33.837
And in the last branch we will write "Bullets were added". We compile the project.

00:09:36.280 --> 00:09:38.886
We got a compilation error.

00:09:40.824 --> 00:09:49.729
We forgot to add a return statement at the end. That is, in this case, we had a pickup and we can finally return true.

00:09:50.201 --> 00:09:55.011
Also in the IsAmmoFull function I made a mistake. You need to write DefaultAmmo.Bullets

00:09:56.196 --> 00:10:03.750
Let's change the default values ​​of the launcher, because we now have one cartridge in the clip. It will not be clear how everything works.

00:10:04.870 --> 00:10:10.930
Click on the pickup and add the BP_STULauncher weapon type to the WeaponType.

00:10:12.030 --> 00:10:20.760
We start the game. We cross the pickup with full ammunition - the pickup is not taken. Further, for example,

00:10:20.760 --> 00:10:26.766
if I spend two rounds, I run into a pickup truck and our current clip is completely full.

00:10:26.766 --> 00:10:35.192
"Bullets were added" was printed to the log. Now we shoot one clip and let's say several cartridges. We run in.

00:10:35.192 --> 00:10:42.690
"Ammo is full now" was printed in the log, that is, we added both bullets and clips. Then I sped up the video.

00:10:42.690 --> 00:10:49.710
I shoot all the ammunition, everything is zero. We run into the pickup and, in fact, we added 6 to both of

00:10:49.710 --> 00:10:56.705
us in the ammunition load , but we immediately reloaded one and "Ammo was empty" was printed in the log. Everything is working.

00:10:56.705 --> 00:11:03.053
But we have one hidden problem: if we, for example, shoot again all the ammunition.

00:11:04.173 --> 00:11:10.990
After that we will change weapons and run into the pickup. We got the message "Ammo was empty".

00:11:10.990 --> 00:11:17.410
Let's switch weapons. Launcher values ​​= 0 / 6. This happened because in the weapon component we

00:11:17.410 --> 00:11:24.454
always reload CurrentWeapon, that is, the current weapon. Let's change the FOnClipEmptySignature delegate a bit.

00:11:24.454 --> 00:11:32.730
Let's add one parameter to it. Let's change the macro to DECLARE_MULTICAST_DELEGATE_OneParam.

00:11:33.450 --> 00:11:39.810
And we will add a pointer to ASTUBaseWeapon, that is, when we call the Broadcast function,

00:11:39.810 --> 00:11:44.760
we will pass a pointer to the weapon that requests reloading.

00:11:47.670 --> 00:11:55.921
The delegate's signature has changed. Now we need to pass the this parameter to the Broadcast function,

00:11:55.921 --> 00:12:04.092
that is, a pointer to the current instance. We do this in two places in the ASTUBaseWeapon class.

00:12:04.953 --> 00:12:10.192
The delegate's signature has changed. We need to change the callback function OnClipEmpty.

00:12:10.192 --> 00:12:16.238
She now has one parameter - a pointer to the weapon that needs to be reloaded.

00:12:19.032 --> 00:12:22.086
Add a parameter to the .cpp file.

00:12:25.186 --> 00:12:32.298
Now we can make the following check: if the pointer to the current weapon equals AmmoEmptyWeapon,

00:12:32.298 --> 00:12:37.030
then we need to call the animation and reload the weapon. Everything is as we usually did,

00:12:37.030 --> 00:12:42.145
that is, in fact, call the ChangeClip function. Let's transfer it under the given if.

00:12:42.644 --> 00:12:48.923
And if the current weapon is different, then we need to iterate over the entire array of weapons.

00:12:51.153 --> 00:12:53.463
And if we find such a weapon,

00:12:55.272 --> 00:12:59.879
then we just silently call the ChangeClip function of this weapon.

00:13:01.051 --> 00:13:08.330
That is, no animations will be played, but the reload logic of the weapon will work. Also, for the purity of the function, let's

00:13:08.330 --> 00:13:16.522
immediately check at the beginning: if the pointer is null, then we exit the function. Let's check. Compile.

00:13:17.945 --> 00:13:25.280
We'll put one cartridge at the launcher so as not to waste time firing the ammunition. We launch.

00:13:26.590 --> 00:13:28.480
We shoot two times.

00:13:30.300 --> 00:13:38.531
We take the pickup. The current weapon is a launcher, so the animation worked. Everything is correct. We shoot twice again.

00:13:38.531 --> 00:13:45.910
We change weapons. We run into the pickup. Once again we change the weapon and now the clip for the weapon is also full.

