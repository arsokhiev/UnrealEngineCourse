WEBVTT
Kind: captions
Language: en

00:00:05.868 --> 00:00:09.986
In this lesson, we have an independent work with you. It is necessary to damage the character.

00:00:10.664 --> 00:00:15.496
If the line trace is successful, we can get the actor from the hit result

00:00:15.496 --> 00:00:21.165
and damage it using the take damage function. In general, the task is not very difficult.

00:00:21.165 --> 00:00:26.810
The only thing is, figure it out on your own how to get the actor to whom we need to inflict damage.

00:00:29.199 --> 00:00:34.692
So let's get started. We calculate the parameters trace start, transe end, hit.

00:00:35.640 --> 00:00:42.100
And in case of hitting any actor, the bBlockingHit variable will equal true.

00:00:42.100 --> 00:00:48.280
And we can harm the actor in this thread. For this, let's create a function called MakeDamage

00:00:48.280 --> 00:00:55.643
and pass the HitResult structure there. We create this function at the bottom of our class.

00:00:58.000 --> 00:01:06.222
And add the MakeDamage declaration to the .h file. Let's get the actor that we actually fell into.

00:01:08.338 --> 00:01:18.510
We can get it from the HitResult structure. We create a local variable. Let's call it DamagedActor.

00:01:19.495 --> 00:01:26.946
And let's see if the function we need is in the HitResult structure. It's called GetActor.

00:01:28.886 --> 00:01:33.890
This function returns a pointer to the actor in case of a successful hit test

00:01:33.890 --> 00:01:39.706
with one of its collision components. Checking the pointer to nullptr.

00:01:40.890 --> 00:01:48.349
If the pointer is null, then we exit the MakeDamage function and one of the ways to harm the actor

00:01:48.349 --> 00:01:54.577
is to call the TakeDamage function on it. We have already used it in this course.

00:01:56.332 --> 00:02:00.371
The first parameter is the amount of damage. Let's create a variable stub.

00:02:01.294 --> 00:02:06.340
We'll add it a bit later as a property. The second parameter is the damage event.

00:02:07.116 --> 00:02:12.825
Let's just pass in an empty constructor. We don't need any additional information now.

00:02:13.848 --> 00:02:19.714
The third parameter is a pointer to the controller responsible for this damage. We created

00:02:19.714 --> 00:02:27.120
the GetPlayerController function a little earlier, so we can use it. The last parameter is

00:02:27.120 --> 00:02:35.127
the actor who directly caused the damage. This is our weapon, that is, we pass a pointer to the current object - this.

00:02:35.812 --> 00:02:43.348
Create property DamageAmount in .h file. Float variable.

00:02:45.024 --> 00:02:48.424
By default, let this weapon take 10 health points away.

00:02:50.897 --> 00:02:58.756
Copying the macro with property. Everything is ready for us. Let's build.

00:03:00.301 --> 00:03:02.443
Let's check our logic.

00:03:04.166 --> 00:03:11.667
We shoot at the character, we hit and 10 points of health begin to decrease, as a result the character died.

00:03:12.284 --> 00:03:19.659
Let's restart and check one thing: open the console, type ShowCollision.

00:03:22.870 --> 00:03:26.660
Collisions appeared, let's kill the enemy character.

00:03:27.776 --> 00:03:32.627
The collision capsule remains, we cannot go through it, it blocks our path until the

00:03:32.627 --> 00:03:37.470
actor is completely destroyed. It looks like a bug, especially since

00:03:37.470 --> 00:03:42.859
we will not see a collision in the game , so there will be an invisible obstacle. Let's fix it up.

00:03:43.942 --> 00:03:49.868
If the character dies, we need to disable any collisions for the capsule component.

00:03:50.636 --> 00:03:54.543
Let's include the header file where the capsule component is located.

00:04:02.637 --> 00:04:12.546
The character function that returns a pointer to the capsule component is called GetCapsuleComponent. No surprises here.

00:04:14.206 --> 00:04:19.609
We'll use a function called SetCollisionResponseToAllChannels.

00:04:20.034 --> 00:04:25.277
This function sets the collision response uniform for all channels.

00:04:27.569 --> 00:04:36.000
It has one argument of type ECollisionResponse. This is an enum. Let's hit f12 on this type.

00:04:36.000 --> 00:04:44.297
We have already seen this value in the blueprint: ignore, overlap, block. There is also a Max element.

00:04:44.297 --> 00:04:50.556
This is a purely technical element by which the number of elements in an enum is known. A peculiar programming trick.

00:04:50.556 --> 00:04:58.489
Set the response for all channels to ignore and start the editor. Let's check.

00:05:00.619 --> 00:05:09.478
Launch, open the console. We enter ShowCollision, we kill our opponent.

00:05:10.714 --> 00:05:14.000
The capsule remained, but we calmly pass through it.

00:05:14.000 --> 00:05:20.884
And also the weapon of the character who died is not deleted. But what to do about it, let's decide a little later in this section.

