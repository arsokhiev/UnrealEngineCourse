WEBVTT
Kind: captions
Language: en

00:00:06.000 --> 00:00:10.571
In the final tutorial on reloading weapons, let's take a look at the arsenal.

00:00:10.571 --> 00:00:18.738
The first thing we will do is create an additional delegate that will notify the weapon component that we are out of ammo.

00:00:19.600 --> 00:00:24.785
Let's call the signature for the delegate FOnClipEmpty. We now have a weapon

00:00:24.785 --> 00:00:29.940
reloading itself if the cartridges in the clip run out. With this approach, for example, we

00:00:29.940 --> 00:00:36.480
will not play the reload animation. Let's replace ChangeClip with a call to the delegate in the place where

00:00:36.480 --> 00:00:43.690
we reduce the number of cartridges in the DecreaseAmmo function and also make the ChangeClip function public.

00:00:45.147 --> 00:00:51.390
That is, the weapon component will call this function if reloading is needed. And let's

00:00:51.390 --> 00:00:58.670
add an additional function called CanReload. It will determine whether the given weapon can do

00:00:58.670 --> 00:01:05.116
reloading in principle. A situation is possible when the clip is full, or their number is zero.

00:01:07.748 --> 00:01:23.062
Therefore, this function will return true when CurrentAmmo.Bullets &lt;DefaultAmmo.Bullets &amp;&amp; CurrentAmmo.Clips&gt; 0

00:01:26.069 --> 00:01:30.988
Since our ChangeClip has become a public function, let's change the logic a little.

00:01:31.358 --> 00:01:38.730
Let's remove the updates to the number of bullets to the very bottom and check that if the number of clips we have is zero,

00:01:38.730 --> 00:01:43.785
then we will print some warning message and immediately exit the function.

00:01:49.520 --> 00:01:59.790
Let's add a similar check for the DecreaseAmmo function. We have it protected, but it certainly won't get any worse.

00:02:00.282 --> 00:02:06.564
In this function, we need to check the number of bullets, so we replace clips with bullets

00:02:08.200 --> 00:02:10.930
and the message text with clip is empty.

00:02:12.558 --> 00:02:18.588
Move to the weapon component class. Let's add two additional functions to the private section.

00:02:20.618 --> 00:02:24.413
The first of these will be a callback to our OnEmptyClip delegate.

00:02:26.279 --> 00:02:31.990
And add the second one for convenience, let's call it ChangeClip. We'll put all the reloading logic into it

00:02:31.990 --> 00:02:34.930
and call it if the user wants to

00:02:34.930 --> 00:02:41.631
recharge, or our OnEmptyClip delegate has been called. Add a body for each function.

00:02:46.142 --> 00:02:50.792
And after spawning the weapon, we can subscribe to the OnEmptyClip delegate.

00:02:54.070 --> 00:02:58.000
We transfer all the logic from the reload function to ChangeClip.

00:03:00.181 --> 00:03:07.302
And we call ChangeClip when the user requests a reload, or when the weapon is notified that the clip is empty.

00:03:11.285 --> 00:03:14.569
As soon as we start reloading, we must stop firing

00:03:18.495 --> 00:03:21.485
and then call the ChangeClip function.

00:03:25.255 --> 00:03:31.630
And we can add the CanReload weapon function to the CanReload weapon component check.

00:03:35.726 --> 00:03:39.096
Add one more condition: CurrentWeapon-&gt; CanReload.

00:03:47.157 --> 00:03:49.157
All is ready. We compile the project.

00:03:50.820 --> 00:03:53.571
We start the game. We will shoot all the ammunition.

00:03:54.380 --> 00:03:57.921
Callback automatically comes - OnEmptyClip. The animation starts.

00:04:00.237 --> 00:04:07.880
And also, if the clip is full, then when you press the R button, reloading does not work for us. And if they made one shot,

00:04:07.880 --> 00:04:14.950
then the clip is no longer full and reloading using the R key works. And the launcher will reload

00:04:14.950 --> 00:04:19.350
every time, because we have one cartridge installed in the clip.

00:04:20.634 --> 00:04:29.266
We have a small bug. Let's consider the following situation. Let's say we shoot the entire clip and only one cartridge remains in the store.

00:04:29.723 --> 00:04:34.307
After that we start shooting and shooting continues during reloading.

00:04:34.307 --> 00:04:36.937
Why is this happening? Let's get a look.

00:04:37.643 --> 00:04:43.667
So we have one cartridge left. We start shooting. We shoot the MakeShot and also start the timer.

00:04:44.287 --> 00:04:48.114
We shoot one round. The DecreaseAmmo function is called.

00:04:48.828 --> 00:04:53.809
Inside this function, the number of cartridges becomes zero and we get to the point

00:04:53.809 --> 00:04:59.221
where the OnClipEmpty delegate is called. Then recharge starts.

00:04:59.221 --> 00:05:06.000
Reloading updates the number of cartridges immediately and by the time the timer expires, our magazine is no longer empty.

00:05:06.000 --> 00:05:12.640
Therefore, at this point in the program, we can add a call to the StopFire function, which is redefined in the rifle class

00:05:12.640 --> 00:05:19.550
and our timer will stop. But that's not all. We also need to reverse the order of the timer setting call and

00:05:19.550 --> 00:05:27.226
the MakeShot function call. If this is not done, then at that point in the call to the StopFire function we simply will not have a valid TimerHandle.

00:05:28.105 --> 00:05:32.794
We start the game. We leave one cartridge in the clip.

00:05:33.440 --> 00:05:39.812
We shoot this cartridge. Do not release the mouse button. Our timer has stopped. Everything now works correctly.

