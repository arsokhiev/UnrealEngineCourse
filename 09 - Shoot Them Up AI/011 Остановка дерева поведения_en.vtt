WEBVTT
Kind: captions
Language: en

00:00:06.720 --> 00:00:14.452
Let's add a log to the tick function of our FindEnemy service. Let's use the temporary category - LogTemp.

00:00:14.452 --> 00:00:22.276
We will remove it immediately after this tutorial. Let's print the FindEnemy message and see

00:00:22.276 --> 00:00:29.343
what happens when we kill the enemy. Open the blueprint AI of the character.

00:00:29.343 --> 00:00:36.837
We will temporarily put him a small number of lives so that we can destroy the enemy with one shot.

00:00:36.837 --> 00:00:44.393
Therefore, we set in the MaxHealth variable, for example, five health points. Open the log, clear

00:00:44.393 --> 00:00:50.897
and run the game. The service works. FindEnemy log is displayed. Let's kill the character.

00:00:50.897 --> 00:00:57.000
FindEnemy continues to display, we also see that there is a side effect - the weapon continues to shoot.

00:00:57.000 --> 00:01:03.736
The Behavior tree continues to run and will only stop when the character's Destroy function is called.

00:01:03.736 --> 00:01:09.272
Let's make the Behavior tree logic stop the moment the character dies.

00:01:09.272 --> 00:01:18.070
Opening up the AI ​​controller. Let's see what happens inside the RunBehaviorTree function. Press f12. The functions are uncomplicated.

00:01:18.070 --> 00:01:26.030
The blackboard is configured, then the brain component is cast to the behavior tree component, and if

00:01:26.030 --> 00:01:33.072
this component does not exist, then it is created. Next, the created component is assigned to the brain component.

00:01:33.072 --> 00:01:38.198
BrainComponent is the base class. BehaviorTreeComponent is inherited from it

00:01:38.198 --> 00:01:44.112
and in the AI ​​controller we have a pointer to this component, that is, we can access it.

00:01:44.582 --> 00:01:51.443
At the very bottom, the StartTree function is called, which essentially starts the asset behavior tree.

00:01:51.965 --> 00:01:58.429
If we press F12 on the BehaviorTreeComponent, we will see that it really inherits from the brain component.

00:01:59.240 --> 00:02:06.407
We go to the brain component and in the public section we see the functions through which we can control the behavior tree.

00:02:06.407 --> 00:02:12.524
To stop the tree, we need to call the CleanUp function. Let's get down to it.

00:02:14.317 --> 00:02:20.756
Let's go to the BaseCharacter class. We will stop the behavior tree when calling the OnDeath function.

00:02:21.749 --> 00:02:29.266
First, we need to make it virtual so that we can override it in AICharacter.

00:02:29.266 --> 00:02:33.590
You can override private virtual functions in C ++, but in this

00:02:33.590 --> 00:02:40.130
case you will not be able to call the base OnDeath function. Therefore, we will transfer it to the protected section.

00:02:44.254 --> 00:02:48.564
Go to AICharacter, override the OnDeath function.

00:02:51.394 --> 00:02:53.884
We create the body of the function in a .cpp file.

00:02:55.984 --> 00:02:59.718
And we immediately call the basic OnDeath function so

00:03:00.044 --> 00:03:04.174
that the rest of the logic is not lost when our character dies.

00:03:07.415 --> 00:03:11.232
We create a local variable. We call it STUController.

00:03:16.444 --> 00:03:22.054
We assign this variable cast to the AI ​​controller of the pointer to the controller.

00:03:27.586 --> 00:03:30.439
Next, we check the validity of the STUController

00:03:33.540 --> 00:03:35.970
and also the brain component.

00:03:42.162 --> 00:03:47.912
Let's include the BrainComponent.h header file.

00:03:52.412 --> 00:03:55.295
Call the CleanUp function.

00:03:55.921 --> 00:04:01.141
That is, when a character dies, we immediately stop the behavior tree.

00:04:02.638 --> 00:04:03.668
Checking.

00:04:05.423 --> 00:04:06.514
We start the game.

00:04:08.233 --> 00:04:12.975
We kill the enemy and FindEnemy is no longer displayed in the console.

