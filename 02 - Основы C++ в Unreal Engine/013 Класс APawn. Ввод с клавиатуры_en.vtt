WEBVTT
Kind: captions
Language: en

00:00:07.400 --> 00:00:11.540
Hello everyone! From theory to practice. In this lesson, we

00:00:11.540 --> 00:00:18.140
will create an APawn class, consider input, teach our spawn basic movement, and set up our own GameMode class

00:00:18.140 --> 00:00:25.650
with this default spawn. Let's pay attention to world settings, where we will configure all the classes of the

00:00:25.650 --> 00:00:34.457
current level. By default and all this time we have game mode and all base classes were in None.

00:00:34.457 --> 00:00:41.620
But nevertheless, when we launched our group, control was available to us, that is, we could move with

00:00:41.620 --> 00:00:50.359
arrows and control the camera with a mouse. What is really going on? Let's press Shift + F1

00:00:50.359 --> 00:00:55.941
This removes focus from the game, but the game does not stop, that is, all ticks continue.

00:00:55.941 --> 00:01:03.837
If we click again, the focus will return. Press Shift + F1 and look in the world outliner.

00:01:05.823 --> 00:01:16.567
In fact, all the classes were spawned unreal. These are the default classes: default pawn, player controller, player state,

00:01:17.279 --> 00:01:27.738
game mode base, game state base. That is, if nothing is specified by default, then the level will have all default classes.

00:01:29.090 --> 00:01:34.801
And the default pawn has a minimum input, which we use directly.

00:01:35.485 --> 00:01:40.658
Now we will create our own pounder and see how all this is configured manually.

00:01:42.672 --> 00:01:46.733
We press stop. Set Game Mode Override

00:01:48.552 --> 00:01:54.420
to GeometrySandboxGameModeBase. This game mode was created automatically by unreal when we created the project.

00:01:56.164 --> 00:02:00.760
Please note that all classes have changed to default ones. We

00:02:00.760 --> 00:02:06.519
observe them directly when we press play. If we switch to C ++ and open

00:02:08.704 --> 00:02:15.205
our gamemode, we will see that it is completely empty. It inherits from GameModeBase.

00:02:16.311 --> 00:02:25.889
And therefore, nothing changes with us. All settings that are currently in GameModeBase are passed to our GameModeSandbox.

00:02:27.947 --> 00:02:34.187
Let's create a pawn class. To do this, go to the file -&gt; new C ++ class menu. We select pawn from the list.

00:02:35.199 --> 00:02:38.079
Let's call our spawn SandboxPawn.

00:02:41.476 --> 00:02:43.296
Click the Create Class button.

00:02:47.103 --> 00:02:51.970
Our pawn class has been created. The functions that are generated by default are the same

00:02:51.970 --> 00:02:57.170
as those of the actor. The only difference is that the SetupPlayerInputComponent function has been additionally added.

00:02:57.784 --> 00:03:03.749
This function configures user input. We will work with him a little later.

00:03:03.749 --> 00:03:09.510
First, let's tell our game mode that this spawn class will be the default spawn class.

00:03:10.623 --> 00:03:12.716
Go to the header file game mode.

00:03:13.930 --> 00:03:18.749
Let's add a constructor for the game mode class. We create a public section.

00:03:22.692 --> 00:03:24.181
We declare a constructor.

00:03:26.086 --> 00:03:28.715
In the .cpp file, create the body of the constructor function.

00:03:33.926 --> 00:03:36.476
In the body of the constructor, write the DefaultPawnClass

00:03:37.260 --> 00:03:44.281
equals .. Press F12 on the DefaultPawnClass. The GameModeBase header file has opened.

00:03:45.000 --> 00:03:51.343
The DefaultPawnClass is the property of this class. It sets the class on the basis of which

00:03:51.343 --> 00:03:56.622
game mode will create the pawn object. We have already used the TSubclassOf template.

00:03:57.523 --> 00:04:04.640
This property can be installed in the blueprint version of the game mode, but it can also be changed in C ++.

00:04:05.532 --> 00:04:12.416
Return to the .cpp file of our game mod. Let's include the sandbox pawn header file.

00:04:14.900 --> 00:04:22.183
To get a pointer to UClass, there is a special function called StaticClass.

00:04:22.561 --> 00:04:28.607
The function is static. Thus, in our game mode, we override the default pawn class.

00:04:31.917 --> 00:04:32.997
We launch the editor.

00:04:33.968 --> 00:04:41.798
The editor has opened and if we look at the world settings panel, we will see that the default pawn class has changed to sandbox pawn.

00:04:41.798 --> 00:04:48.000
That is, we have redefined the default pawn in our game mode. Let's go back to C ++ for a second.

00:04:49.045 --> 00:04:54.816
Click on the base class GameModeBase F12. Let's fall into the header file.

00:04:55.109 --> 00:05:03.151
If you press F12 again on any function, then we will fall into the .cpp file. At the very top of the file, we see the body of the base class constructor.

00:05:03.667 --> 00:05:07.806
In the constructor, we can see how all the main classes of the framework are concatenated.

00:05:08.786 --> 00:05:12.468
DefaultPawnClass, PlayerControllerClass and so on.

00:05:13.067 --> 00:05:21.474
In our game mode, you and I have redefined the DefaultPawnClass so far. We return to the editor, start the game.

00:05:22.084 --> 00:05:28.326
And now we cannot move around the stage. Camera rotation does not work. This is

00:05:28.326 --> 00:05:35.330
because our spawn class doesn't handle user input in any way. Let's fix that by going

00:05:35.330 --> 00:05:42.160
to the edit -&gt; project settings menu. The project settings window opens. We need a subcategory input.

00:05:42.467 --> 00:05:49.210
Let's select it in the list, click, we get into the binding section. Binding is the binding of a username

00:05:49.210 --> 00:05:55.536
to some action: whether it be pressing a key on the keyboard, pressing a mouse button,

00:05:55.536 --> 00:06:04.521
moving the mouse, or pressing a button on a controller. Bindings are divided into 2 types. The first one is action mappings.

00:06:04.521 --> 00:06:11.860
And the second is axis mappings. Action mapping is a discrete action. We receive the callback event

00:06:11.860 --> 00:06:18.440
only once, for example, when the user pressed a key, and axis mapping is a continuous

00:06:18.440 --> 00:06:24.150
receipt of the state of the control, that is, if we hold down the button, then every tick we will

00:06:24.150 --> 00:06:29.467
receive a value that the button is pressed or, for example, we can keep track of the position of the mouse.

00:06:29.467 --> 00:06:36.615
An input has been created in the interface, in which you need to enter the name of our action. Let's call it MoveForward.

00:06:40.348 --> 00:06:43.818
This binding will be responsible for moving our paun forward.

00:06:48.980 --> 00:06:57.223
We are looking for the up key. We choose it. We also see that there is a scale parameter.

00:06:57.223 --> 00:07:04.351
This value is multiplied by the current mapping axis value. We will see how it works very soon.

00:07:07.170 --> 00:07:12.607
We can add an additional button to the same mapping. Down button.

00:07:13.240 --> 00:07:20.123
And do not create a new mapping for move backward, but simply set the down scale to -1.

00:07:23.473 --> 00:07:27.343
Let's create another mapping. We call it move right.

00:07:29.893 --> 00:07:32.263
Find the right key in the list.

00:07:35.210 --> 00:07:39.580
And by analogy with move forward, add the left key.

00:07:41.660 --> 00:07:43.733
And set the scale to -1.

00:07:44.720 --> 00:07:50.233
We created two mappings for the movement of our paun. Assigned them keyboard keys

00:07:50.233 --> 00:07:55.834
that will call these actions. Let's go to the code. We are now ready to program the movement of the pawn.

00:07:57.316 --> 00:08:02.320
Let's start with a little bit of work in the header file and create all the necessary variables and

00:08:02.320 --> 00:08:09.779
functions, and then program everything in the .cpp file. Let's create a property for the root component.

00:08:11.425 --> 00:08:16.743
We will make a special component called SceneComponent as root in our pawn.

00:08:16.743 --> 00:08:21.696
This component has no visual representation and contains only the

00:08:21.696 --> 00:08:27.720
transformation in the world. You can attach other components to the SceneComponent. We will see this

00:08:27.720 --> 00:08:33.903
in the next lecture. Next, we need a property that will store the speed of the pawn movement.

00:08:35.840 --> 00:08:40.214
The variable type will be float. Let's call it Velocity.

00:08:41.573 --> 00:08:44.840
And by default we will set some value. Let it be 300.

00:08:46.491 --> 00:08:49.395
Add a private section at the bottom of the header file.

00:08:51.425 --> 00:08:55.303
We need one more member of the FVector type class,

00:08:56.425 --> 00:09:03.877
which will store the velocity vector of our spawn. We call the change VelocityVector. By default, let this vector

00:09:03.877 --> 00:09:09.916
be zero. You can use a special constant of the FVector type called ZeroVector.

00:09:11.632 --> 00:09:15.421
Let's create two functions that will be called when the actions are called.

00:09:16.680 --> 00:09:21.664
The first function will be responsible for moving forward / backward. Let's call it MoveForward.

00:09:24.129 --> 00:09:31.591
The function has one parameter, float. All functions that are bound to axis mapping must have one parameter.

00:09:31.591 --> 00:09:34.484
We will see very soon what comes in this parameter.

00:09:35.293 --> 00:09:39.215
The second function will have the same signature. Let's call it MoveRight.

00:09:41.182 --> 00:09:43.793
Let's create a body for each function in a .cpp file.

00:09:47.938 --> 00:09:52.566
We close the header file, we will no longer need it. And go to the .cpp file.

00:09:54.543 --> 00:09:59.033
Go to the pawn constructor and create the SceneCompnent component.

00:10:03.070 --> 00:10:07.394
This component will be the root one, so we call the SetRootComponent function.

00:10:07.891 --> 00:10:10.573
And we pass a pointer to the SceneComponent into it.

00:10:13.070 --> 00:10:17.687
We also create a pawn our own logging category. We copy the macro.

00:10:19.963 --> 00:10:24.193
Insert and name the category LogSandboxPawn.

00:10:28.300 --> 00:10:32.386
Let's go to the MoveForward function. Let's log in the amount parameter.

00:10:39.969 --> 00:10:41.905
We do the same in the MoveRight function.

00:10:43.442 --> 00:10:48.398
Let's make it so that our functions are called when the corresponding mappings are triggered.

00:10:48.970 --> 00:10:51.968
To do this, go to SetupPlayerInputComponent.

00:10:54.000 --> 00:10:58.748
We need to add a header file where InputComponent is declared. Let's do it.

00:11:00.386 --> 00:11:04.448
It is located at "Components / InputComponent.h"

00:11:08.497 --> 00:11:15.680
In order to bind functions to the corresponding mappings, there are two functions in the InputComponent.

00:11:15.680 --> 00:11:22.505
One of them is called BindAction, and the second is BindAxis. Now we need the BindAxis function.

00:11:23.285 --> 00:11:27.455
In the first argument, we pass the name of our MoveForward mapping.

00:11:29.434 --> 00:11:31.408
The second argument is a pointer to an object.

00:11:33.143 --> 00:11:36.480
And the third argument is a reference to the function we want to call.

00:11:40.291 --> 00:11:47.440
If you press F12, look into the code of this function, you can see that the delegate bind that is already

00:11:47.440 --> 00:11:54.510
familiar to us is happening inside, but in a slightly different form. Duplicate the line of code, replace MoveForward

00:11:54.510 --> 00:12:01.391
with MoveRight and start programming the pawn movement. We will change the value of the velocity vector

00:12:01.391 --> 00:12:06.650
depending on the variable Amount. Now we will not deal with vector mathematics with you, we will

00:12:06.650 --> 00:12:13.460
assume that the actor moves either along the X-axis or along the Y-axis. Therefore, in the MoveForward function

00:12:13.460 --> 00:12:20.940
of VeolocityVector we will change the X component, and in the MoveRight function we will change the Y component. We assign the

00:12:21.540 --> 00:12:28.938
value of the variable to the X component Amount. Looking ahead, I want to say right away that

00:12:30.199 --> 00:12:35.650
the Amount value will be either 1, or -1, or 0, that is, when the key is not

00:12:35.650 --> 00:12:43.750
pressed, the value 0 will come, when we pressed up then the Amount will be 1, and when we

00:12:43.750 --> 00:12:50.325
pressed Down then The Amount will be -1, because we specified the scale parameter.

00:12:54.753 --> 00:12:59.188
In the MoveRight function, change the Y component of the VelocityVector.

00:13:01.278 --> 00:13:08.447
VelocityVector changes the values ​​depending on the input, and we can each frame, that is, in the Tick function,

00:13:08.447 --> 00:13:12.429
change the position of our spawn depending on the given vector.

00:13:13.224 --> 00:13:20.902
First, let's check that this vector is not zero, if it is zero, then you can not do the calculations again.

00:13:21.683 --> 00:13:30.547
The FVector class has a special function called IsZero. This function returns true when all components of the

00:13:30.547 --> 00:13:36.425
current vector are zero. We can press F12 and make sure that this is indeed the case.

00:13:38.729 --> 00:13:43.993
Create a local constant like FVector. It will store the new pawn position,

00:13:43.993 --> 00:13:48.870
which we need to set. We name the variable NewLocation and it will be calculated

00:13:48.870 --> 00:13:53.708
using the formula for uniform rectilinear motion. We take the current position of the actor

00:13:53.708 --> 00:13:58.345
in space, that is, the value returned by the GetActorLocation function.

00:13:58.850 --> 00:14:06.480
And we assign it the speed value multiplied by DeltaTime and multiplied by VelocityVector.

00:14:07.783 --> 00:14:11.910
After that we need to set a new position for our pawn. To do this, call

00:14:11.910 --> 00:14:17.190
the SetActorLocation function and pass the NewLocation constant into it.

00:14:18.334 --> 00:14:19.497
We launch the editor.

00:14:21.000 --> 00:14:30.685
We open the log, clear, press play, check our keys: forward, backward, left, right and look

00:14:30.685 --> 00:14:37.168
at the console, when we press the forward button, then Forward becomes one, when we release it - 0,

00:14:37.168 --> 00:14:45.117
when back, then our scale = -1 is triggered and the actor moves in the opposite direction.

