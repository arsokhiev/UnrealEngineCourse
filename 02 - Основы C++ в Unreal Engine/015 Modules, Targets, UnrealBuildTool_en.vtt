WEBVTT
Kind: captions
Language: en

00:00:05.517 --> 00:00:10.279
In this lesson, let's see how the process of compiling our source codes is going on.

00:00:10.279 --> 00:00:17.080
Let's deal with all the additional files that are in our project, and also talk about engine macros.

00:00:17.080 --> 00:00:20.718
This section is advanced, so you can skip it in general.

00:00:20.718 --> 00:00:27.089
In the course of the course, we will not need the information from this lesson, with the exception of some things that we will consider

00:00:27.089 --> 00:00:33.275
in the corresponding lessons. But for a general understanding of how the Unreal Engine works, this information will be very useful.

00:00:33.727 --> 00:00:38.862
The first file that we will look at is called GeometrySandbox.Build.cs

00:00:38.862 --> 00:00:44.460
This build file is written in C # - it sets the rules according to which the source

00:00:44.460 --> 00:00:51.988
code of our project - GeometrySandbox will be built . When we start the build by clicking, for example, on the Play Local Windows Debugger button,

00:00:51.988 --> 00:00:56.296
a special utility called Unreal Build Tool is launched.

00:00:56.296 --> 00:01:02.127
This is a special subroutine that comes with the Unreal Engine. We can find it in the engine directory.

00:01:02.127 --> 00:01:11.860
Go to the Unreal Engine root folder, to the Engine / Binaries / DotNet folder. If you filter by extension,

00:01:11.860 --> 00:01:18.654
you can find this program UnrealBuildTool.exe, that is, in fact, visual studio launches this

00:01:18.654 --> 00:01:23.809
program with various commad line arguments. In general, we can create some kind of bat file to

00:01:23.809 --> 00:01:28.960
build our game that will call this program. And in accordance with the settings of our

00:01:28.960 --> 00:01:34.621
build file, the sources are compiled. Let's go further. All engine code is made up of modules.

00:01:34.621 --> 00:01:40.726
A module is a building block in which some functionality is encapsulated. It can be artificial intelligence,

00:01:40.726 --> 00:01:45.970
special effects, user interface, and so on. Moreover, our project with the game is also

00:01:45.970 --> 00:01:51.573
a module. In each build file, the module class inherits from a special class

00:01:51.573 --> 00:01:57.243
called ModuleRules. By default, our class has several settings. Now we will be

00:01:57.243 --> 00:02:00.639
interested in a list called PublicDependencyModuleNames

00:02:00.639 --> 00:02:07.438
This list specifies the modules that our project will depend on. By default, 4 main engine modules are added.

00:02:07.438 --> 00:02:14.836
In solution explorer, we can open the UE4 project. Go to the source folder, to the runtime folder.

00:02:14.836 --> 00:02:20.803
This folder contains the engine sources, and each folder is a module. That is, we can find:

00:02:20.803 --> 00:02:29.297
Core, CoreUObject and if we open the module, we will see that the same build.cs file is located at the root.For an

00:02:29.990 --> 00:02:36.686
example, we can open the InputCore build file and see how the module is being built.

00:02:36.686 --> 00:02:41.943
Note that the compilation of this module will depend on the target platform.

00:02:42.314 --> 00:02:48.364
Also in the build file, we can add dependencies on various third-party libraries. For example, if we want to connect a

00:02:48.364 --> 00:02:55.071
machine learning library or a computer vision library, all this can be configured in the build file.

00:02:55.765 --> 00:03:01.875
In the description for the lecture, I will also leave a link to the documentation for the build file of the module.

00:03:01.875 --> 00:03:07.214
You can see what build options are available. I repeat once again - this information is for the advanced level.

00:03:07.214 --> 00:03:12.420
We may need it if the usual assembly of the project is not enough. During our course

00:03:12.420 --> 00:03:15.846
we will go into this file, but the settings will be quite simple.

00:03:15.846 --> 00:03:22.140
So, everything consists of modules, our game is also a module. Let's also take a look at two more generated files

00:03:22.140 --> 00:03:26.792
that are in the root of the project: GeometrySandbox.h and .cpp

00:03:26.792 --> 00:03:33.537
In this file, using a special macro, the main game module is specified, that is, roughly speaking, the game itself can also consist

00:03:33.537 --> 00:03:38.817
of several modules. We have one module with you, so its name is specified

00:03:38.817 --> 00:03:44.070
in the file that is generated by default . We will not touch this file at all. If you open the main file of our

00:03:44.070 --> 00:03:50.330
project, with the extension .uproject, you can see that this file is actually

00:03:50.330 --> 00:03:56.557
JSON markup. The modules field contains an array of game modules objects; there are also additional parameters.

00:03:56.557 --> 00:04:01.950
We have one module with you - GeometrySandbox. The version of the engine is also indicated, various descriptions,

00:04:01.950 --> 00:04:07.661
which we have empty. With the help of .uproject, the Unreal Engine is able to generate the necessary files for the project and

00:04:07.661 --> 00:04:13.740
also run in accordance with the settings of the Unreal Editor. Moving on. Let's deal with the

00:04:13.740 --> 00:04:19.910
next thing. Our project has a little mess of header files and forward declaration.

00:04:19.910 --> 00:04:23.624
In fact, it's good that this happened, since we will analyze this issue.

00:04:24.302 --> 00:04:31.287
We open the SandboxPawn header file and we see that we have a forward declaration for the camera and at the same time we do

00:04:31.287 --> 00:04:36.960
not have a forward declaration for the StaticMesh component, and we also have no errors when building the

00:04:36.960 --> 00:04:42.170
project. What is going on with us? Why do we need to make a forward declaration

00:04:42.170 --> 00:04:47.930
for the camera component , but no component for the static mesh? In fact, we can turn off most of the

00:04:47.930 --> 00:04:54.080
header files that we have in the .cpp files, for example, turn off the static mesh , turn

00:04:54.080 --> 00:05:00.450
off the input component, go to the BaseGeometryActor header file, remove the include static mesh

00:05:00.450 --> 00:05:09.010
component. In the .cpp file, let's remove MaterialInstance, Engine and Timer. In the .cpp file of the

00:05:09.010 --> 00:05:17.100
GeometryHubActor class, disable the world header file, remove the input component in the controller and build

00:05:17.100 --> 00:05:22.537
our project without starting the editor. To do this, right-click on the project and select build.

00:05:24.494 --> 00:05:30.140
We've successfully compiled everything without our header files. This happened as a result of the triggering of a

00:05:30.140 --> 00:05:34.500
mechanism called precompiled headers. This is a mechanism that allows you to significantly

00:05:34.500 --> 00:05:39.570
reduce the amount of work that the preprocessor must do when compiling a project. The idea is

00:05:39.570 --> 00:05:44.635
to preprocess a group of files in advance and then just substitute the finished piece of text.

00:05:44.925 --> 00:05:51.238
Let's open the build file of the Engine module. Before that, let's take a look at our module. The setting

00:05:51.238 --> 00:05:56.283
responsible for precompiled headers is called PCHUsage. That is, precompiled headers usage.

00:05:56.283 --> 00:06:01.570
And the default is the value at which shared pch files will be explicitly connected. Open the build

00:06:01.570 --> 00:06:07.180
file of the Engine module and find a setting called SharedPCHHeaderFile. This file

00:06:07.180 --> 00:06:13.562
will be added when compiling our module. Let's find it in the Engine module, in the public directory.

00:06:14.530 --> 00:06:19.259
We open. This file contains headers that will be preprocessed, that is, this is

00:06:19.259 --> 00:06:23.273
code that changes very rarely. Let's search the file.

00:06:23.273 --> 00:06:34.630
We see that the StaticMeshComponent is located here, we can also find MaterialInstanceDynamic, TimerManager.

00:06:34.630 --> 00:06:39.400
The InputComponent is also here and so on. And now it becomes clear why everything was

00:06:39.400 --> 00:06:45.197
compiled correctly for us , that is, this header file was implicitly added when building our project.

00:06:47.561 --> 00:06:53.400
Now let's change the setting a little and put NoPCHs. If you are using

00:06:53.400 --> 00:06:58.260
unreal engine sources, then you can search the project and find this setting.

00:06:59.350 --> 00:07:04.494
That is, now we are declaring that we do not want to use precompiled headers when building our project.

00:07:05.000 --> 00:07:05.970
We execute build.

00:07:08.818 --> 00:07:13.817
The project did not compile because the corresponding header files are not included in our code.

00:07:14.237 --> 00:07:15.850
Let's bring them back.

00:07:17.760 --> 00:07:25.253
Go to SandboxPawn. We make a forward declaration in the static mesh header file of the component.

00:07:29.740 --> 00:07:33.970
In the .cpp file, we return the InputComponent header file and

00:07:33.970 --> 00:07:37.948
we also need to connect the static mesh header file.

00:07:40.000 --> 00:07:41.866
Go to BaseGeometryActor.

00:07:42.488 --> 00:07:49.165
We also add a forward declaration for the static mesh component. Let's copy it from SandboxPawn.

00:07:53.342 --> 00:07:58.760
Go to the .cpp file. Ctrl + Z return all header files.

00:08:00.000 --> 00:08:04.369
Move to GeometryHubActor. Returning the world header file.

00:08:05.184 --> 00:08:08.807
And in the controller, return the InputComponent header file.

00:08:10.908 --> 00:08:12.360
Compile the project again.

00:08:17.859 --> 00:08:24.760
Something is still forgotten. The BaseGeometryActor .cpp file also needs to include a static mesh component.

00:08:28.702 --> 00:08:37.400
And in SandboxPlayerController we use a pointer to the world, so we include the header file Engine / World.h

00:08:40.773 --> 00:08:45.403
This is how I described World. Putting the project together again.

00:08:47.040 --> 00:08:54.381
Everything. Build successs. The project compiled successfully. We have correctly included all the header files that are needed in our project.

00:08:54.381 --> 00:08:58.020
The only thing we did not include the SceneComponent header file, because its include

00:08:58.020 --> 00:09:03.150
is in the actor class, which is accordingly in the pawn class. This can also be done,

00:09:03.150 --> 00:09:08.610
it won't get any worse, but for some super basic types, this can be avoided, since we

00:09:08.610 --> 00:09:14.520
are sure that they are connected either through PCH or through CoreMinimal.h, or their include is

00:09:14.520 --> 00:09:20.640
somewhere in the parent class. Let's return the precompiled headers setting to its default state. The approach

00:09:20.640 --> 00:09:28.092
we've just taken is called include what you see. I'll also leave a link to this page of the

00:09:28.092 --> 00:09:33.041
Unreal documentation, you can read more, but in general, we have now covered it.

00:09:33.993 --> 00:09:40.320
Let's also see how to quickly find the header file of the class we need. We just enter the class into google. The

00:09:40.320 --> 00:09:47.547
Unreal documentation page opens . There is a table at the top of the page; the include field contains the header file

00:09:47.547 --> 00:09:53.520
we are interested in . Or, if you already have a documentation page open, you can also enter the class of interest

00:09:53.520 --> 00:09:58.128
in the search field and select the page with the class in the filtered information.

00:10:02.063 --> 00:10:09.485
Let's move on to the two remaining files in the directory of our project: one of them is called GeometrySandbox.Target.cs

00:10:09.485 --> 00:10:14.990
and the second GeometrySandbox.EditorTarget.cs In these C # files, additional

00:10:14.990 --> 00:10:20.270
settings for the assembly are specified , depending on how we want to run our project. If we want

00:10:20.270 --> 00:10:26.420
to run the game under the editor, then the EditorTarget is used, if we want to build a standalone

00:10:26.420 --> 00:10:32.119
game, then the usual target is used, which corresponds to TargetType.Game

00:10:32.119 --> 00:10:39.022
There are also additional types of targets, for example, if we want to build our game as a dedicated server,

00:10:39.022 --> 00:10:45.050
then we will need to manually add GeometrySandbox.ServerTarget.cs to the project and

00:10:45.050 --> 00:10:51.140
write TargetType.Server to the Type variable , that is, in these files we specify the specific settings for the

00:10:51.140 --> 00:10:57.620
game assembly for certain targets. I will also include a link to the targeting documentation with the lecture. In our

00:10:57.620 --> 00:11:03.360
course, we will not configure these files in any way, we will use what unreal generated for

00:11:03.360 --> 00:11:10.000
us by default, but it is important to remember that when we start the game under the editor, EditorTarget is used,

00:11:10.000 --> 00:11:14.760
and when we create a standalone build, we will pack the game into an exe file, then

00:11:14.760 --> 00:11:21.712
another target will be used, which is of the game type. If you open the project

00:11:21.712 --> 00:11:28.290
directory, the Binaries / Win64 folder, you can see that when launched for the editor, our code is collected in a special

00:11:28.290 --> 00:11:36.306
.dll file. You can also go to the binaries directory of the engine, open the win64 subdirectory

00:11:36.306 --> 00:11:42.150
and you can see that a special .dll file with TargetEditor has been created for each module, that is,

00:11:42.150 --> 00:11:47.040
in fact, when we download the unreal engine from under the epic launcher, precompiled modules are

00:11:47.040 --> 00:11:53.160
copied to our disk to in the form of binary .dll files, and when we want to compile unreal from

00:11:53.160 --> 00:11:59.102
source, the compilation of modules and the creation of .dll files will take place on our local machine.

00:12:01.204 --> 00:12:06.840
Now let's talk about unreal macros and code generation. Urneal implements its own

00:12:06.840 --> 00:12:11.820
reflection systems or reflection system - this is the ability of a program to track and

00:12:11.820 --> 00:12:17.160
modify its own structure and behavior during its execution. With the help of this system,

00:12:17.160 --> 00:12:24.615
we can get information about types, call a function by name, get the names of enum elements,

00:12:24.615 --> 00:12:30.271
we can create an iterator that will go through all the fields of the structure and get some information.

00:12:31.029 --> 00:12:35.310
We can pass a pointer to the class whose object we want to create.

00:12:35.310 --> 00:12:41.580
We have already done this trick with you, in GameMode, when we specified classes for the pawn and controller, on the basis of

00:12:41.580 --> 00:12:48.770
which we want to create objects. This system significantly speeds up the development process and the areas of

00:12:48.770 --> 00:12:54.800
its application are quite different. The most obvious is the use of an editor: outputting all properties to the interface

00:12:54.800 --> 00:13:01.970
, communication of C ++ and blueprint code, serialization of objects, for example, if we

00:13:01.970 --> 00:13:08.376
create several actors on the stage, change some properties for them, then close the editor,

00:13:08.376 --> 00:13:13.729
reopen it - all property values ​​are place, that is, all properties were saved to disk

00:13:13.729 --> 00:13:20.000
and then read from disk. Also on the basis of this system is the garbage collector.

00:13:20.000 --> 00:13:24.950
Unreal has its own memory system, we will talk about it in the next lesson, and

00:13:24.950 --> 00:13:30.680
you can also add networking to the scope of this system. In pure C ++, all these advantages are

00:13:30.680 --> 00:13:37.400
naturally absent, this is the concept of a game engine, it is also important to note that unreal does not prohibit

00:13:37.400 --> 00:13:43.640
writing in pure C ++, that is, you can create a regular C ++ class,

00:13:43.640 --> 00:13:49.763
process some calculations in it and, for example, transfer the result of calculations in any actor.

00:13:49.763 --> 00:13:55.521
Let's see what happens at the very beginning when we create a class from under the editor.

00:13:56.711 --> 00:14:06.050
Open the directory where the engine is located, go to the Engine / Content / Editor / Templates folder.This

00:14:06.868 --> 00:14:12.130
directory contains templates of all the main classes of the engine, if we open

00:14:12.130 --> 00:14:19.030
the actor class template, we will see that this is a kind of meta file with a bunch of variables into which the

00:14:19.030 --> 00:14:25.860
necessary ones are substituted class names, necessary copyrights, and so on, and as a result of the substitution of all

00:14:25.860 --> 00:14:32.639
necessary variables, the final class file is created. Let's run the build of our project.

00:14:35.075 --> 00:14:40.730
We have everything up to date, let's add an empty line and click on build again.

00:14:43.147 --> 00:14:49.340
What happens at the very beginning? We see that the parsing headers GeometrySandboxEditor line was written to the console

00:14:49.340 --> 00:14:55.370
and then a special utility called the Unreal Header Tool was launched - this is a special

00:14:55.370 --> 00:15:02.610
parser-generator that processes all the macros that are in our source code. The first thing this generator

00:15:02.610 --> 00:15:09.630
does is that it scans all the header files and looks for header files with the suffix .generated.h

00:15:09.630 --> 00:15:16.350
in them - this header file is a marker for the Unreal Header Tool, thanks to which it

00:15:16.350 --> 00:15:21.840
understands that this header file needs to be processed, that is, in it contains specific unreal

00:15:21.840 --> 00:15:29.033
types, if it does not find this header file in the file, then it will simply ignore it.

00:15:29.033 --> 00:15:35.504
After that, the generator goes through all UENUM, USTRUCT, UCLASS, UPROPERTY, UFUNCTION

00:15:35.504 --> 00:15:41.640
and generates additional code that is necessary for the reflection system of Unreal Engine. Some of the code

00:15:41.640 --> 00:15:48.810
goes to the .generated.h header file, if we press f12, we can see a bunch of generation code.

00:15:48.810 --> 00:15:55.830
It is not intended for human reading, but you can note that some wrappers have been created around

00:15:55.830 --> 00:16:03.630
our properties, and if we try to search for a class member that is not a property in this file,

00:16:05.614 --> 00:16:13.370
press Ctrl + F, then we will not find anything. No additional code has been generated for this class member.

00:16:14.548 --> 00:16:19.016
All files are generated in the intermediate directory of our project.

00:16:19.016 --> 00:16:26.931
Right-click on the file header, select Open Contain Folder, a subdirectory in the intermediate folder will open,

00:16:26.931 --> 00:16:31.300
where all the generated files are located. Besides the header files

00:16:31.300 --> 00:16:39.436
, .cpp files are also generated for each class. There is even more code-generation in these files.

00:16:40.000 --> 00:16:46.304
There are absolutely monstrous types. And again, these files are also not intended for

00:16:46.304 --> 00:16:53.186
human readability, which is completely unnecessary to know what happens internally during normal development.

00:16:55.190 --> 00:17:01.980
And one moment. The class has an additional macro called the project name

00:17:01.980 --> 00:17:08.010
underscore API. Press f12 on it. the macro is in another generated file,

00:17:08.010 --> 00:17:14.157
which is also located in the intermediate directory. You can be convinced of this.

00:17:15.951 --> 00:17:21.579
Another macro DLLEXPORT is assigned to it, which has different meanings

00:17:21.579 --> 00:17:29.700
for different platforms. We compile for windows, for windows it is __declspec (dllexport)

00:17:30.442 --> 00:17:36.232
which essentially means that our class can be exported from a .dll file.

00:17:37.897 --> 00:17:45.190
We can also safely delete all the generated files, and if we build the project again,

00:17:47.272 --> 00:17:56.240
we will see that the Unreal Header Tool will regenerate them. Also, for example, the intermediate folder contains all the visual studio

00:17:56.240 --> 00:18:02.840
project files in the project files directory, moreover, the entire intermediate folder contains temporary files.

00:18:02.840 --> 00:18:09.240
Let's close solution. Let's remove the intermediate directory. In the next section, we will talk

00:18:09.240 --> 00:18:16.366
more about the directories that are in the root of the project, but for now, let's delete many of them.

00:18:16.980 --> 00:18:25.000
And put only the config, content and source folder. Let's also delete the file solution. When you clone the repository

00:18:25.000 --> 00:18:31.001
for the first time, you will see exactly this structure of our project.

00:18:31.001 --> 00:18:35.268
If you right-click on the .uproject file, you can, for example, change

00:18:35.268 --> 00:18:41.710
the engine version, or you can regenerate all visual studio files. If you click on the show log

00:18:41.710 --> 00:18:47.380
button , you can see that the Unreal Build Tool is launched, it can also generate

00:18:47.380 --> 00:18:55.108
visual studio project files. An intermediate directory was created and all project files were created as well.

00:18:55.913 --> 00:19:01.640
Therefore, if it seems to you that the project is not compiling through no fault of yours, then the first thing I

00:19:01.640 --> 00:19:07.070
recommend to do is delete all temporary directories and regenerate them again.

00:19:09.189 --> 00:19:13.490
Also, after generation, an error sometimes occurs that the solution does not know which

00:19:13.490 --> 00:19:18.372
of the projects is starting. You can see how this error looks in the git book.

00:19:18.372 --> 00:19:23.840
The solution to this problem is quite simple - right-click on the project of our

00:19:23.840 --> 00:19:27.685
game and select set as startup project from the pop-up menu.

00:19:28.427 --> 00:19:34.620
This is all in this lesson, now we understand much more about the compilation and assembly process of our project.

00:19:35.000 --> 00:19:40.550
If the lesson turned out to be difficult - it's okay, you can, for example, return to it after the end of the course.

