WEBVTT
Kind: captions
Language: en

00:00:06.418 --> 00:00:10.740
In this lesson, we will create a timer, initialize it to BeginPlay. It

00:00:10.740 --> 00:00:15.300
will work for us every N seconds and for each time the timer is triggered, the

00:00:15.300 --> 00:00:21.350
color of our material will change. Let's do a little prep work before creating the timer.

00:00:22.470 --> 00:00:28.140
In the GeometryData structure, let's create a new float variable. Let's call it TimerRate.

00:00:28.140 --> 00:00:33.300
This variable will be responsible for the frequency of our timer. TimerRate will be

00:00:33.300 --> 00:00:39.150
measured in seconds. Add an uproperty macro on top of the variable, expose it in editor.

00:00:40.680 --> 00:00:43.170
Next, we create a timer descriptor - a variable

00:00:43.170 --> 00:00:45.720
that will uniquely identify our timer.

00:00:47.150 --> 00:00:54.890
This variable is of type FTimerHandle. Let's call it TimerHandle. Using this descriptor,

00:00:54.890 --> 00:00:59.720
we will have access to the timer - we can pause it, or stop it, for example.

00:01:03.260 --> 00:01:07.880
We create the OnTimerFired function. This function will be called every time

00:01:07.880 --> 00:01:14.352
the timer fires. We also create the body of the function in a .cpp file.

00:01:16.805 --> 00:01:22.650
The last preparatory moment. In the .cpp file at the top, add a header file

00:01:22.840 --> 00:01:29.225
called TimerManager. Let's go to the BeginPlay function.

00:01:30.890 --> 00:01:34.085
and at the very bottom we write GetWorldTimerManger.

00:01:35.039 --> 00:01:38.410
This function returns an object called the timer manager.

00:01:38.410 --> 00:01:47.210
We'll use the SetTimer function of the timer manager object. This function will initialize our timer for us

00:01:47.210 --> 00:01:52.778
. The first argument to the function is a reference to the timer handle.

00:01:53.220 --> 00:01:56.744
We pass our TimerHandle variable there.

00:01:58.100 --> 00:02:03.200
The second argument is a pointer to the object on which we want to call the function every time

00:02:03.200 --> 00:02:09.243
the timer fires. We will be calling the function of our actor, so we specify this.

00:02:10.041 --> 00:02:16.460
This in C ++ means a pointer to the current object. The third argument is a reference to a function

00:02:16.460 --> 00:02:19.520
that will be called every time the timer fires.

00:02:21.877 --> 00:02:26.707
We are specifying our OnTimerFired function.

00:02:29.730 --> 00:02:31.850
The fourth argument is the frequency of the

00:02:31.850 --> 00:02:38.294
timer in seconds. We'll use a variable from GeometryData called TimerRate.

00:02:39.000 --> 00:02:44.840
And the last argument. It means timer loop or not. Let's set it to true, if we

00:02:44.840 --> 00:02:51.380
set it to false, then the timer would work once and stop. For some of you,

00:02:51.380 --> 00:02:56.840
this construction may seem complicated in terms of syntax. Under the lecture, I will leave a link

00:02:56.840 --> 00:03:04.020
to function binding in C ++. You can read about it yourself. In simple terms,

00:03:04.020 --> 00:03:10.063
the timer will call the function of our object when the specified number of seconds have passed.

00:03:10.610 --> 00:03:17.382
Go to the OnTimerFired function and program the material color change in it.

00:03:19.249 --> 00:03:25.649
For this we will use the already existing SetColor function. Let's pass the NewColor variable there

00:03:25.649 --> 00:03:34.417
and create this color randomly. We create this variable. It will be of type FLinearColor.

00:03:35.970 --> 00:03:41.430
It is very easy to generate a random color in the unreal engine. Everything has already been programmed for us. We just

00:03:41.430 --> 00:03:47.458
call the static FLinearColor function called MakeRandomColor.

00:03:49.132 --> 00:03:53.014
Let's also print the generated color to the console.

00:03:57.780 --> 00:04:03.780
FLinearColor (like most unreal engine types) has a ToString function, which we will

00:04:03.780 --> 00:04:10.588
use when displaying our color. Let's consider a small point. Our SetColor function

00:04:11.290 --> 00:04:17.740
has a call to CreateAndSetMaterialInstanceDynamic. We can safely call it as many times as we want.

00:04:17.740 --> 00:04:24.860
Let's fall inside, press F12. First, this function checks if the dynamic material already exists

00:04:24.860 --> 00:04:29.540
, if it exists, it simply returns a pointer to it.

00:04:31.176 --> 00:04:37.438
That is, there is no memory leak in our timer call to SetColor. The first call to the SetColor

00:04:37.438 --> 00:04:42.120
function will create the dynamic material, and subsequent calls will use a

00:04:42.120 --> 00:04:47.940
pointer to it. So we're ready to see what we've got. Launch editor.

00:04:49.510 --> 00:04:53.731
Let's remove one actor from the scene so as not to get confused where whose color is.

00:04:54.512 --> 00:05:02.544
Go to the details panel of the remaining actor and let's change the TimerRate. Let's put one second.

00:05:04.733 --> 00:05:06.000
We start.

00:05:07.746 --> 00:05:14.839
Our code works. The actor changes color every second and this color is logged to the output log.

00:05:18.583 --> 00:05:22.633
Let's stop the timer after it has run N times.

00:05:23.056 --> 00:05:25.680
Let's create two additional class members.

00:05:26.079 --> 00:05:29.874
The first term is a constant. It will be responsible for the number of times

00:05:29.874 --> 00:05:33.472
our timer needs to run before we stop it.

00:05:33.472 --> 00:05:41.762
And the second is the counter of our timer operations. Let's call it TimerCount and set the value to zero.

00:05:43.388 --> 00:05:49.731
In the OnTimerFired function, check the condition that TimerCount is less than the

00:05:49.731 --> 00:05:56.864
maximum number of timer fires. Also add the TimerCount prefix increment right away.

00:05:57.240 --> 00:06:02.610
Under this condition, we will change the color of our material, so we will transfer all the code to the if block.

00:06:04.958 --> 00:06:08.818
And additionally we will log TimerCount.

00:06:16.320 --> 00:06:21.573
If the value of the TimerCount variable becomes larger than the MaxTimerCount value,

00:06:21.573 --> 00:06:29.142
then we will stop our timer. To do this, we will also use the global timer manager

00:06:29.780 --> 00:06:34.880
and call its function, which is called ClearTimer, which

00:06:34.880 --> 00:06:38.624
takes a timer descriptor - TimerHandle.

00:06:40.600 --> 00:06:43.961
Let's also add a timer stop to the log.

00:06:48.502 --> 00:06:50.440
We launch the editor.

00:06:51.660 --> 00:06:54.867
Press the play button and look in the log.

00:06:58.850 --> 00:07:03.788
After five times, the timer stopped and the color does not change anymore.

