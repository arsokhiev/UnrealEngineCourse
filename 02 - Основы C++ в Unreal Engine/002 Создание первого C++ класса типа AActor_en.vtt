WEBVTT
Kind: captions
Language: en

00:00:04.780 --> 00:00:10.060
Hello everyone! In this lesson, we will create our first C ++ class. We will inherit from the Actor class

00:00:10.060 --> 00:00:14.890
- this is the base class of the engine that can be added to the scene. A class can be created in several

00:00:14.890 --> 00:00:21.040
ways. In the directory with C ++ classes, right-click and select the new C ++ class.

00:00:21.040 --> 00:00:26.890
If the directory is not visible, then go to view options and change the checkbox show C ++ classes.

00:00:26.890 --> 00:00:33.010
The next way is to select a new C ++ class through the main menu and you can also configure a hotkey,

00:00:33.010 --> 00:00:40.270
if we open editor preferences and search for C ++, then we will filter out a hotkey

00:00:40.270 --> 00:00:45.760
called a new C ++ class and in the input field you can enter any combination that is

00:00:45.760 --> 00:00:53.080
convenient for you. We close the window. Let's create a class via the main menu. Choosing a new C ++ class.

00:00:54.080 --> 00:00:59.630
The popup has opened - this is our helper for creating a class. In the center we see the most commonly

00:00:59.630 --> 00:01:03.620
used classes and components from which we can inherit.

00:01:05.690 --> 00:01:09.860
On hover, brief information about this class or component

00:01:09.860 --> 00:01:12.890
pops up . You can read, study.

00:01:13.990 --> 00:01:19.480
You can also open the full list of all classes by clicking on the checkbox on the right show all classes.

00:01:21.770 --> 00:01:27.440
This list contains the hierarchy of all classes of the engine. You can trace who is inherited from whom.

00:01:29.420 --> 00:01:34.184
We return back. Select the actor class, click the next button.

00:01:35.553 --> 00:01:38.864
On the second screen, we need to set the name of our actor.

00:01:38.864 --> 00:01:43.970
Let's call our first class BaseGeometryActor.

00:01:45.970 --> 00:01:50.260
In the second field, we need to specify the path to the directory where we want the engine to

00:01:50.260 --> 00:01:56.860
create our files for us. By default, this is the root of the project - the source folder. We will not change this,

00:01:57.700 --> 00:02:05.633
but we will use the additional feature and click on the public button, which is located on the right.

00:02:05.633 --> 00:02:11.380
Two additional directories, public and private, will be created. All header

00:02:11.380 --> 00:02:18.940
files will be created in the public folder, and all .cpp files will be created in the private folder.

00:02:20.320 --> 00:02:25.780
We are ready with you to create the first class. Press the create class button and wait for visual

00:02:25.780 --> 00:02:32.117
studio to update the project, compile the files, and editor will load all the dynamic libraries.

00:02:32.622 --> 00:02:38.588
This will all be done on the fly, but it will take some time. Depends on the power of your PC.

00:02:39.663 --> 00:02:44.050
We opened visual studio, updated the solution, and added the

00:02:44.050 --> 00:02:49.470
newly created BaseGeometryActor. We can see this in solution explore,

00:02:49.470 --> 00:02:55.860
if you have it closed, then we go to the main menu -&gt; view -&gt; solution explorer.

00:02:56.379 --> 00:03:02.000
There are several projects at the root of the solution explorer. The first one is engine - the engine code. The second folder is

00:03:02.000 --> 00:03:06.769
games - this is where custom projects go, our GeometrySandbox is here too.

00:03:07.980 --> 00:03:12.492
The source folder contains all the code files we are working with.

00:03:13.250 --> 00:03:21.100
The private and public folders were also created. The .cpp file went to private, and the header .h to public.

00:03:22.037 --> 00:03:24.300
The solution also contains additional files

00:03:24.300 --> 00:03:28.720
that we will not consider now. Let's talk about them a little later.

00:03:29.490 --> 00:03:33.720
Let's take a closer look at what the engine generated when the actor was created.

00:03:35.740 --> 00:03:39.860
Let's go line by line. The first line is the copyright,

00:03:39.860 --> 00:03:46.020
some comment about who created this code, or what organization. We will learn how to create

00:03:46.020 --> 00:03:51.280
our own copyrights when we get down to our main project for this course.

00:03:52.775 --> 00:03:57.577
pragma once is a preprocessor directive that guarantees that during compilation

00:03:57.577 --> 00:04:04.770
this source file will be included strictly once. Next, we have #include

00:04:04.770 --> 00:04:09.960
coreminimal, this is a header file that defines some basic types, constants,

00:04:09.960 --> 00:04:16.590
tools for logging. The next header file actor.h We inherit

00:04:16.590 --> 00:04:23.400
publicly from the actor, so we need to specify the header file where actor is declared.

00:04:25.102 --> 00:04:30.710
And the last header file BaseGeometryActor.generated.h is the

00:04:30.710 --> 00:04:35.900
auto-generated header. The engine generates it for each actor, there is

00:04:35.900 --> 00:04:43.520
meta information about the class and it must go the very last in the list of all includes, that is, if we

00:04:43.520 --> 00:04:50.937
want to add some additional include, then we must include it before .generated.h

00:04:52.710 --> 00:05:00.360
Next is our code class. We see three macros here. The first is UCLASS, the

00:05:00.360 --> 00:05:05.280
second is the project name underscore API and generated_body.

00:05:06.320 --> 00:05:10.760
We will consider this in more detail at the end of this section, when there is a general idea of ​​the

00:05:10.760 --> 00:05:19.140
engine - these three macros and the generated.h header file.At this stage, it is enough to know

00:05:19.140 --> 00:05:23.880
that this is a kind of body kit, some markup around the class that allows you to use the

00:05:23.880 --> 00:05:30.797
capabilities of the unreal engine, for example, to make this class available in blueprints.

00:05:32.282 --> 00:05:38.692
Let's switch to editor. We can already find our class in the content browser.

00:05:38.692 --> 00:05:45.779
The Editor knows about the existence of our actor. Let's see where he is. In the content browser on the left,

00:05:46.660 --> 00:05:52.930
select the C ++ classes folder, if your folders are not visible, then click on the sandwich button. This

00:05:52.930 --> 00:05:58.920
button hides / opens folders in the content browser. If the folder with C ++ classes is

00:05:58.920 --> 00:06:06.398
not visible to you, then we go to view options and select show C ++ classes from the menu. Check the checkbox.

00:06:07.190 --> 00:06:13.340
We fall down the folder hierarchy and find our actor class. The Editor knows about its existence,

00:06:13.340 --> 00:06:22.090
we can drag &amp; drop to throw it onto the stage. It appeared in the world outliner - a tree of all objects

00:06:22.090 --> 00:06:29.330
that are on the stage. It is completely empty, it has no representation, no gizmo, like, for example,

00:06:29.330 --> 00:06:36.330
the static mesh of the floor, which is on the stage, but we'll fix it all soon.

00:06:38.331 --> 00:06:42.680
We go back to the code. Let's take a look at the functions that unreal generated in the body of

00:06:42.680 --> 00:06:50.320
our class. The first is a class constructor, this is a classic C ++ constructor in which, for example,

00:06:50.320 --> 00:06:56.170
you can initialize a certain variable. The next function is BeginPlay. It

00:06:56.170 --> 00:07:01.600
is called once, either when the actor is spawned, or when the game starts, if the actor is on stage.

00:07:02.620 --> 00:07:06.070
Next comes the Tick function. This function is called every frame,

00:07:06.070 --> 00:07:10.870
it has a delta time parameter - this is the time difference between the current and the previous tick.

00:07:11.800 --> 00:07:14.860
These functions are virtual, we override them in our actor

00:07:14.860 --> 00:07:19.831
and add specific logic to them, depending on our tasks.

00:07:20.350 --> 00:07:27.565
The .cpp file also contains a copyright comment, we include the header file of our actor.

00:07:29.208 --> 00:07:36.227
And below are the definitions of our constructor functions, BeginPlay and Tick.

00:07:37.386 --> 00:07:39.564
In the constructor, we also see some structure

00:07:39.564 --> 00:07:46.040
called PrimaryActorTick. It has a bCanEverTick field - a boolean,

00:07:46.040 --> 00:07:52.200
which is set to true by default. This means that our actor's tick will be called every frame.

00:07:53.864 --> 00:07:58.912
This variable exists for optimization, sometimes when designing actors, we do not need

00:07:58.912 --> 00:08:03.890
this tick function to be called every frame. This variable is useful

00:08:03.890 --> 00:08:09.900
under certain conditions . In BeginPlay and Tick, we see the Super keyword - this is

00:08:09.900 --> 00:08:17.257
just an alias for the base class name. In classic C ++, we would write like this .. The

00:08:18.784 --> 00:08:24.164
unreal meta code allows you to unify this approach and access all the functions of the

00:08:24.164 --> 00:08:26.880
base class through this Super keyword.

