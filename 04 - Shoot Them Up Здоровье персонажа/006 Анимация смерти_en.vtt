WEBVTT
Kind: captions
Language: en

00:00:07.880 --> 00:00:13.520
In this lesson, we will add an animation of the death of our character and also modify

00:00:13.520 --> 00:00:18.230
the health component. The life we ​​have now can be negative. Let's fix it all up.

00:00:18.230 --> 00:00:23.720
Let's start with a function that will determine whether our character is dead or not. Let's make it also

00:00:23.720 --> 00:00:30.087
available in blueprints. Add the UFUNCTION macro, the BlueprintCallable specifier.

00:00:32.179 --> 00:00:37.706
Let's call our function IsDead. It will return false or true.

00:00:38.390 --> 00:00:45.399
We add the const specifier and the condition under which our character died is quite simple.

00:00:45.399 --> 00:00:50.099
He will be dead if and only if the health value is less than or equal to zero.

00:00:54.450 --> 00:01:00.669
Next, let's declare a delegate that will notify our character whether we are dead or not.

00:01:00.669 --> 00:01:08.838
To do this, we write DECLARE_MULTICAST_DELEGATE. This delegate will only be available in C ++.

00:01:11.040 --> 00:01:19.450
We call it FOnDeath. Do not forget that all delegates must begin with the letter F. Create a delegate

00:01:19.450 --> 00:01:29.440
in the public section of the health component. Let's call it OnDeath and call this delegate when our life value

00:01:29.440 --> 00:01:36.570
is less than or equal to zero. Go to the health component .cpp file. Let's remove the damage type

00:01:36.570 --> 00:01:43.170
header files. We did this only for testing, we don't need it anymore. Also remove

00:01:43.170 --> 00:01:50.130
all logic from the damage type. And let's delete the damage log as well. At the beginning of the OnTakeAnyDamage function,

00:01:50.130 --> 00:01:55.770
let's add a check for two conditions: the first condition - if the damage value is less than or equal to zero,

00:01:55.770 --> 00:02:01.830
then we immediately exit the function. This is such a sanity check for ourselves, so as not to increase life if

00:02:01.830 --> 00:02:10.057
suddenly we receive negative damage and the second condition - if we are already dead, we also exit the function,

00:02:10.670 --> 00:02:16.550
because our health is already 0 and it makes no sense to make any further calculations with it ...

00:02:16.550 --> 00:02:23.550
Next, decrease the health value by the amount of damage. The following situation is possible here: the health variable

00:02:23.550 --> 00:02:31.250
is equal to one, and the damage value is 10, and then the result is -9.

00:02:31.250 --> 00:02:37.250
This satisfies the condition we wrote in the IsDead function. That is, yes, we are dead. The health value is less than 0,

00:02:37.250 --> 00:02:43.640
but, for example, the text component will receive -9 in the update and display this in the game. Therefore, let's

00:02:43.640 --> 00:02:49.310
not allow health to be less than zero. Let's use a special function that is available

00:02:49.310 --> 00:02:55.490
in the FMath class. It's called Clamp. This function is template. The type of the class used

00:02:55.490 --> 00:03:00.950
in the template will be inferred automatically by the compiler. In our case, it will be float. Clamp takes three

00:03:00.950 --> 00:03:08.600
arguments. The first is the value of a certain variable, and the second, third argument is the boundaries of the segment

00:03:08.600 --> 00:03:14.120
on which this variable can exist, and if the value of the variable is in this

00:03:14.120 --> 00:03:21.320
segment, then clamp will simply return this variable. If the value of the variable is less than the left border,

00:03:21.320 --> 00:03:27.669
then the left border will be returned, if it is greater than the right border, then the right border will be returned.

00:03:27.669 --> 00:03:34.220
And, thus, we are confident that the next health value we will have in the range from zero to MaxHealth.

00:03:35.730 --> 00:03:43.929
After we changed the value of health, we need to check once again whether we are alive or not, that is ,

00:03:43.929 --> 00:03:48.969
we call the IsDead function, if the health value is less than or equal to 0,

00:03:48.969 --> 00:03:56.079
then we call the Broadcast function of our delegate OnDeath, so we will notify

00:03:56.079 --> 00:04:01.091
all clients who are subscribed to given delegate that our character died.

00:04:01.091 --> 00:04:08.329
Let's go to the character class and subscribe to this delegate in the BeginPlay function.

00:04:10.790 --> 00:04:21.050
We find our OnDeath delegate in the health component and make a bind function that will be responsible in the character

00:04:21.050 --> 00:04:27.680
for the death of the character. Our delegate will only be used in C +, so for bind we

00:04:27.680 --> 00:04:36.203
have to use the AddUObject function. We specify our character object as the first parameter - we pass the this pointer,

00:04:36.620 --> 00:04:42.657
and the second parameter is a pointer to the function that we will now create. Let's call it OnDeath.

00:04:42.657 --> 00:04:52.857
Let's start by creating the body of the function. Let's add it to the end of the character.

00:04:52.857 --> 00:04:58.160
It returns nothing and there are no parameters either. The signature completely matches

00:04:58.160 --> 00:05:08.007
the delegate and also add the function declaration to the header file in the private section.

00:05:10.455 --> 00:05:16.524
And let's just display a message in the OnDeath function that our character died.

00:05:19.210 --> 00:05:29.445
Let's print the message "player is dead" and add character as the name. To do this, we will use the GetName function.

00:05:29.445 --> 00:05:33.995
Don't forget about the * operator, which turns FString

00:05:33.995 --> 00:05:40.000
into a TCHAR array. Launch editor and see what we get.

00:05:41.200 --> 00:05:48.788
Click play. We run into the red sphere. Lives are decreasing. Became equal to 0. Negative values

00:05:48.788 --> 00:05:56.809
no longer appear. We can also check the log. The message "player ... is dead" was printed.

00:05:58.329 --> 00:06:04.106
Let's go to the External Content directory. In animation.

00:06:04.939 --> 00:06:12.440
We have a Death animation. We would like to turn it on when our character dies.

00:06:12.440 --> 00:06:20.384
That is, when its health value is equal to zero. Let's go to our animation blueprint first.

00:06:22.378 --> 00:06:29.840
Let's look at the state machine that we have. The first thing that comes to mind: we can create

00:06:29.840 --> 00:06:36.680
an additional state, call it Death. We have an IsDead function. And by analogy, we can

00:06:36.680 --> 00:06:44.554
make an additional flag by which we will move from each state to a new state of death.

00:06:45.787 --> 00:06:50.840
But this is extremely inefficient, because when adding a new state to the state machine, we will have to

00:06:50.840 --> 00:06:58.032
add an arrow to our death state, that is, we can get to the death state from any other state.

00:06:58.032 --> 00:07:04.580
For such situations, there is a special kind of asset called AnimMontage. You can create it by clicking

00:07:04.580 --> 00:07:17.021
on the asset of interest to us and select create -&gt; create anim montage from the menu. Let's call it AM_Death.

00:07:17.658 --> 00:07:20.930
And we will transfer it to the folder with our animations.

00:07:20.930 --> 00:07:26.579
This asset is used to combine various animations, that is, we can add several animations

00:07:26.579 --> 00:07:33.394
to the timeline that we want to play in a row, but we are interested in another feature of this type of assets.

00:07:33.394 --> 00:07:38.690
It lies in the fact that we can play this animation directly from the code, or from the blueprint,

00:07:38.690 --> 00:07:46.830
without resorting to the animation graph. Let's create a property where we will install this

00:07:46.830 --> 00:07:55.495
animation asset. Let's make this property available only in the default settings.

00:07:59.150 --> 00:08:06.111
And assign it the "Animation" category. The C ++ class that corresponds to this asset

00:08:06.111 --> 00:08:12.997
is called UAnimMontage. Let's call the pointer to this type DeathAnimMontage.

00:08:14.810 --> 00:08:23.229
We go to the .cpp file, into the function that handles the death of the character. To play animation montage

00:08:23.942 --> 00:08:30.260
, the ACharacter class has a function called PlayAnimMontage. It takes several parameters.

00:08:30.260 --> 00:08:36.431
We are now only interested in the first one - this is the pointer to the animation that we want to play. Also, we can

00:08:36.431 --> 00:08:42.000
not check the given pointer for validity, because this check already exists inside the function.

00:08:43.270 --> 00:08:44.716
Launch editor.

00:08:45.879 --> 00:08:57.000
Open the character's blueprint. Our section with animations has appeared. Install the AM_Death asset.

00:08:57.507 --> 00:09:03.771
Let's temporarily change the distance our camera is at so that we can see the death animation better.

00:09:05.650 --> 00:09:08.932
Compile. We launch.

00:09:09.896 --> 00:09:16.798
We run into the red sphere. Life value is 0, we kind of died, but no animation plays.

00:09:17.588 --> 00:09:23.562
In order for the animation montage to play, we need to make small changes to our animation graph.

00:09:26.567 --> 00:09:33.790
Let's add a node called slot. The node works as follows: if no

00:09:33.790 --> 00:09:39.130
animation montage is playing, then at the output we get the pose simply from source, and if the

00:09:39.130 --> 00:09:44.537
animation montage is playing, then at the output we get an interpolation between the pose of the source

00:09:44.537 --> 00:09:51.460
and the pose of the animation montage. Also notice the SlotName node parameter.

00:09:51.460 --> 00:09:57.827
It is important that this parameter is synchronized with the same parameter in the animation montage.

00:09:57.827 --> 00:10:05.074
Editing can be quite difficult to set up, but this is beyond the scope of our current course. So, let's check.

00:10:05.074 --> 00:10:12.736
The death animation plays, but after the animation ends, the pose reverts back. Let's tweak that as well.

00:10:12.736 --> 00:10:21.371
Go back to our animation montage, to the details panel and find the EnableAutoBlendOut parameter.

00:10:21.371 --> 00:10:27.578
If we set this property to false, then our animated asset will stop

00:10:27.578 --> 00:10:34.990
and the pose will not change. So, let's check again. We run into the sphere. The animation has played and we are left

00:10:34.990 --> 00:10:41.840
on the last frame of the animation, but our character still has control and we are moving

00:10:41.840 --> 00:10:47.314
our crucified character. Let's fix it all up. We continue to work in our OnDeath function.

00:10:47.314 --> 00:10:54.888
Let's stop all traffic. To do this, we call a function of the motion component called DisableMovement.

00:10:54.888 --> 00:10:59.690
The pointer to the motion component can be obtained using a character function

00:10:59.690 --> 00:11:06.249
called GetCharacterMovement. And also add the destruction of our character 5 seconds after death.

00:11:06.249 --> 00:11:12.980
To do this, we will use a function called SetLifeSpan. We do not check the pointer of the motion

00:11:12.980 --> 00:11:21.187
component for nullptr. Let's add a check to the BeginPlay function for this component too. Launch the editor.

00:11:23.440 --> 00:11:29.769
Let's check how everything works for us now. So our character died and our keys don't work.

00:11:29.769 --> 00:11:36.427
We don't move. Five seconds passed and the Destroy function of our character was called.

00:11:36.926 --> 00:11:43.315
Let's improve our code a bit. Let's add an additional delegate with one parameter.

00:11:44.080 --> 00:11:47.874
We use the DECLARE_MULTICAST_DELEGATE_OneParam macro for this.

00:11:48.234 --> 00:11:54.820
We name the delegate FOnHealthChanged. And the type of the parameter will be float.

00:11:57.320 --> 00:12:02.065
We will call this delegate when our character's lives change.

00:12:03.699 --> 00:12:10.949
Add a delegate to the .h file of the health component and name it OnHealthChaged.

00:12:12.239 --> 00:12:19.460
Go to the .cpp file. The first time we have lives installed on BeginPlay,

00:12:19.460 --> 00:12:25.938
so immediately after assigning lives , we must call this delegate with the Health parameter.

00:12:28.770 --> 00:12:32.672
And the second time this delegate will be called when

00:12:32.672 --> 00:12:36.229
our lives change when dealing damage.

00:12:38.224 --> 00:12:40.555
We do all this in terms of optimization.

00:12:41.408 --> 00:12:47.085
In the character class, we can remove the logic for updating the text in the component from the Tick function.

00:12:48.530 --> 00:12:55.620
Bind the new function to the newly created OnHealthChanged delegate and change the value of the text in the component

00:12:55.620 --> 00:13:01.150
in this function . This way, we will only update the text when

00:13:01.150 --> 00:13:06.419
the life value actually changes, rather than resetting it every frame.

00:13:07.732 --> 00:13:13.575
We call our function OnHealthChanged. Go to the .h file.

00:13:16.703 --> 00:13:18.671
We declare a function.

00:13:20.336 --> 00:13:23.903
It will have one parameter of the float type, which is responsible for life.

00:13:26.542 --> 00:13:31.370
We create the body of the function. We are doing all this routine work.

00:13:32.788 --> 00:13:40.678
We transfer the function that sets the text with Tick to our OnHealthChanged function. And just delete the second line.

00:13:40.678 --> 00:13:49.080
We don't need it. Checking. And we have life = 0 by default, but when we receive damage, the

00:13:49.080 --> 00:13:56.220
lives are updated correctly. This behavior was not accidental for us. The reason lies

00:13:56.220 --> 00:14:02.010
in the order in which BeginPlay is called on the actor and on its components. First, BeginPlay is called

00:14:02.010 --> 00:14:08.790
for all the components of the actor, and only then the BeginPlay of the actor itself.

00:14:08.790 --> 00:14:16.290
Therefore, when the OnHealthChanged delegate is called in the health component with the MaxHealth parameter, our function in character

00:14:16.290 --> 00:14:23.610
has not yet been added, so to fix this, we will explicitly call this function on BeginPlay

00:14:23.610 --> 00:14:30.937
. As an argument, we will pass the life value, which we will receive using the GetHealth function of the health component.

