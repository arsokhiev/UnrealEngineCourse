WEBVTT
Kind: captions
Language: en

00:00:06.200 --> 00:00:11.308
We continue to work with sounds. In this lesson, we will run sounds programmatically.

00:00:11.308 --> 00:00:17.582
We will create sounds of shooting, death of the character and also we will play a sound when we run out of

00:00:17.582 --> 00:00:24.712
launcher ammo. Create the first SoundQue in the character directory. We call it SCue_CharacterDeath.

00:00:27.640 --> 00:00:29.220
Let's open it right away.

00:00:31.160 --> 00:00:33.967
Go to the rifle directory.

00:00:35.420 --> 00:00:40.977
Create SoundQue for rifle shooting SCue_RifleFire.

00:00:43.017 --> 00:00:44.997
Next, we move to the launcher.

00:00:46.717 --> 00:00:49.269
The first SoundCue will be responsible for shooting.

00:00:50.493 --> 00:00:51.645
SCue_LauncherFire.

00:00:54.415 --> 00:01:00.142
And we will launch the second one when we run out of cartridges. We call it SCue_LauncherNoAmmo.

00:01:04.090 --> 00:01:06.725
We open all the assets.

00:01:09.518 --> 00:01:14.373
Go to the ExternalContent / Sound directory. Select the Foley directory.

00:01:16.313 --> 00:01:19.465
And we find sounds called body fall.

00:01:20.517 --> 00:01:25.697
We will play them when the character dies. We connect through the random node.

00:01:28.195 --> 00:01:32.850
Sound class we specify character and attenuation settings - Foley.

00:01:35.618 --> 00:01:36.955
Let's play the sound.

00:01:41.105 --> 00:01:50.562
The sound of a falling body is played. The next sound is the sound of a rifle firing. In the weapons directory,

00:01:50.562 --> 00:01:58.912
AssultRifle, we find a sound called shoot. Drag and drop. The sound should be looped.

00:01:59.400 --> 00:02:08.562
Set property Looping to true. Set the sound class weapon and attenuation settings Wep_Shoot.

00:02:09.345 --> 00:02:14.502
The next SoundCue is LauncherFire. Go to the grenade launcher directory.

00:02:15.790 --> 00:02:22.470
Finds multiple sounds that have the text shoot. We select them.

00:02:24.658 --> 00:02:26.608
We connect via random.

00:02:29.370 --> 00:02:31.107
We set the class weapon

00:02:32.298 --> 00:02:34.718
and attenuation settings Wep_Shoot.

00:02:38.320 --> 00:02:39.327
Let's lose.

00:02:45.704 --> 00:02:47.832
We also forgot to check the sound of the rifle.

00:02:52.520 --> 00:02:55.780
This sound will be played in a loop while we shoot.

00:02:55.780 --> 00:03:06.000
And it remains to configure the last SoundQue - NoAmmo. Select dry fire sounds and connect them via random.

00:03:10.770 --> 00:03:13.850
We expose the sound class and attenuation settings.

00:03:17.100 --> 00:03:18.187
We are testing.

00:03:20.860 --> 00:03:25.780
An empty sound is played. This will clearly signal to us that we have no cartridges.

00:03:26.380 --> 00:03:29.165
All SoundQues are set up, we can go to the code.

00:03:30.000 --> 00:03:38.466
Let's start with the sound of the character's death. In STUBaseCharacter, add a forward declaration for the USoundCue class.

00:03:42.080 --> 00:03:46.120
We also create a property that will store a pointer to the SoundCue.

00:03:46.120 --> 00:03:49.335
We can copy it, for example, from the base widget.

00:03:53.790 --> 00:03:55.630
We name the property DeathSound.

00:03:57.180 --> 00:03:58.995
Go to the .cpp file.

00:04:00.273 --> 00:04:05.195
You also need to include the GameplayStatics and SoundCue header files.

00:04:08.970 --> 00:04:13.020
The function that is called when the character dies is called OnDeath.

00:04:13.020 --> 00:04:15.417
In it we will play the sound of death.

00:04:16.998 --> 00:04:19.473
We need to play sound in space.

00:04:20.130 --> 00:04:25.322
The GameplayStatics function that can do this is called PlaySoundAtLocation.

00:04:27.393 --> 00:04:34.747
It takes several parameters: a pointer to the world, a pointer to a sound, and the same basic thing for us is

00:04:34.747 --> 00:04:40.470
the coordinate in the world for sound. By playing the sound this way, attenuation settings

00:04:40.470 --> 00:04:46.322
will be correctly applied to our sound. We pass the third parameter ActorLocation.

00:04:48.730 --> 00:04:51.312
Go to the BaseWeapon header file.

00:04:52.480 --> 00:04:58.350
Add SoundCue to the forward declaration. The Property for the sound will be in the base class.

00:04:58.350 --> 00:05:05.880
But in the rifle and launcher classes, it will play a little differently, because the launcher has discrete

00:05:05.880 --> 00:05:14.437
shots, and in the rifle we have to play the sound in a loop. We call the property FireSound.

00:05:15.763 --> 00:05:22.285
Go to the header file of the launcher. We additionally need the sound of no ammo.

00:05:22.285 --> 00:05:29.150
The rifle, according to our logic, has an infinite supply, so we will create this property only in the launcher class.

00:05:31.318 --> 00:05:34.130
Add a forward declaration for SoundCue.

00:05:38.005 --> 00:05:45.967
Go to the .cpp file. Let's copy the header files.

00:05:48.620 --> 00:05:55.855
And let's start by playing the no-ammo sound. The IsAmmoEmpty () function

00:05:55.855 --> 00:06:01.430
returns true when the arsenal is empty. Therefore, we can split the first condition.

00:06:03.818 --> 00:06:10.620
And in the case when the ammunition is empty, we also need to exit the function, but in addition we will play the

00:06:10.620 --> 00:06:19.382
sound of no ammunition. GameplayStatics also has another function called SpawnSoundAtLocation.

00:06:19.382 --> 00:06:24.130
It practically does not differ from the PlaySoundAtLocation function. In this case, we do

00:06:24.130 --> 00:06:31.097
n't care which one to use. The only difference is that this function returns a pointer to the AudioComponent

00:06:31.097 --> 00:06:35.755
and, for example, if we save it, we can control this sound in the future.

00:06:36.593 --> 00:06:42.361
Let's call this function for a change and we also need to play the sound of the shot.

00:06:42.698 --> 00:06:50.810
You can do this at the very end of the MakeShot function. Let's use one more function. It's called SpawnSoundAttached.

00:06:51.222 --> 00:06:56.510
You can draw a parallel between the functions for spawning special effects.

00:06:57.385 --> 00:07:04.035
The coordinate of the sound will change in accordance with the component to which we attach this sound.

00:07:04.672 --> 00:07:10.620
The first parameter is the sound, the second is the component to which we want to attach the sound. We indicate the weapon mesh.

00:07:11.530 --> 00:07:18.533
The third parameter is the name of the socket. Specify the muzzle socket name - MuzzleSocketName.

00:07:18.533 --> 00:07:26.320
And thus, all sound parameters will be calculated relative to the muzzle coordinate. It remains to make a rifle shot.

00:07:27.628 --> 00:07:30.493
Go to the header file rifle.

00:07:30.918 --> 00:07:36.835
Add a forward declaration for the audio component. We will need it in this class.

00:07:37.547 --> 00:07:42.450
We will spawn the rifle sound once and turn it on or off depending on

00:07:42.450 --> 00:07:49.517
whether the weapon is firing or not. The logic is exactly the same as we did for the muzzle special effects.

00:07:51.403 --> 00:07:54.145
We name the component FireAudioComponent.

00:07:57.760 --> 00:08:00.152
Add the UPROPERTY macro.

00:08:02.483 --> 00:08:07.208
Let's rename two functions. The first one will simply be called InitFX.

00:08:09.160 --> 00:08:18.790
And the second is SetFXActive. There will be more general names, in which we will process both special effects

00:08:18.790 --> 00:08:23.177
and sound, and also rename the parameter to IsActive.

00:08:25.643 --> 00:08:27.993
Also rename in the .cpp file.

00:08:32.450 --> 00:08:35.537
And also in two places at the beginning of our class.

00:08:39.270 --> 00:08:42.390
Add header files.

00:08:45.730 --> 00:08:55.470
And also include the header file audio component. It's located at Components / AudioComponent.h

00:08:59.775 --> 00:09:02.202
Let's start with the InitFX function.

00:09:04.460 --> 00:09:10.030
If the AudioComponent is null,

00:09:14.450 --> 00:09:19.780
then we assign it the value that the SpawnSoundAttached function returns.

00:09:23.130 --> 00:09:26.312
I will pass the same parameters as in the launcher class.

00:09:29.882 --> 00:09:33.062
After that, we call the SetFXActive function.

00:09:34.908 --> 00:09:41.810
And in it, we need to either play the sound or stop it, depending on the IsActive flag.

00:09:43.050 --> 00:09:47.422
We check at the very beginning that the FireAudioComponent pointer is not nullptr.

00:09:49.988 --> 00:09:53.543
If so, then we can use the ternary operator.

00:09:55.310 --> 00:10:00.000
The function of the component that plays the sound is called Play.

00:10:00.325 --> 00:10:04.895
The function that stops the sound is called Stop.

00:10:08.118 --> 00:10:09.318
We compile the project.

00:10:10.268 --> 00:10:16.647
Let's put down all our sounds. We start with the PlayerCharacter class. We indicate the SoundCue of death.

00:10:18.498 --> 00:10:21.188
We do the same in AICharacter.

00:10:27.867 --> 00:10:35.134
Specify the RifleFire firing sound for the rifle.

00:10:37.844 --> 00:10:40.942
And in the launcher, we indicate the sound of the absence of cartridges

00:10:43.795 --> 00:10:45.692
and also the sound of shooting.

00:10:47.890 --> 00:10:51.417
Temporarily disable the brain of our NPCs.

00:10:52.100 --> 00:10:59.887
And also, let's put fewer rounds in the launcher so that we don't have to shoot the entire clip for a long time.

00:11:02.230 --> 00:11:03.422
We start the game.

00:11:09.360 --> 00:11:11.840
Rifle shots are played.

00:11:26.455 --> 00:11:33.507
Due to the shooting, we will not hear the sound of the falling of the body now. Let's temporarily set the volume in the weapon class to 0.

00:11:37.460 --> 00:11:39.000
Launch the game.

00:11:46.883 --> 00:11:51.350
The sound is played. He's just very quiet. We'll tweak that later.

